
FinalProject_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000213a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  0000213a  000021ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800178  00800178  000022e6  2**0
                  ALLOC
  3 .stab         0000267c  00000000  00000000  000022e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012c3  00000000  00000000  00004964  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005c27  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b4  00000000  00000000  00005d87  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0e  00000000  00000000  00005f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010c3  00000000  00000000  00007e49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001032  00000000  00000000  00008f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009f40  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e3  00000000  00000000  0000a0c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000956  00000000  00000000  0000a3a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000acf9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e3       	ldi	r30, 0x3A	; 58
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 37       	cpi	r26, 0x7B	; 123
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3b 0b 	call	0x1676	; 0x1676 <main>
      8a:	0c 94 9b 10 	jmp	0x2136	; 0x2136 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 64 10 	jmp	0x20c8	; 0x20c8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 80 10 	jmp	0x2100	; 0x2100 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 70 10 	jmp	0x20e0	; 0x20e0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 70 10 	jmp	0x20e0	; 0x20e0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 64 10 	jmp	0x20c8	; 0x20c8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 80 10 	jmp	0x2100	; 0x2100 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 88 10 	jmp	0x2110	; 0x2110 <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 70 10 	jmp	0x20e0	; 0x20e0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 43 06 	call	0xc86	; 0xc86 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <__epilogue_restores__+0x18>

000007ea <__floatsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 6d 10 	jmp	0x20da	; 0x20da <__prologue_saves__+0x12>
     7f6:	9b 01       	movw	r18, r22
     7f8:	ac 01       	movw	r20, r24
     7fa:	83 e0       	ldi	r24, 0x03	; 3
     7fc:	89 83       	std	Y+1, r24	; 0x01
     7fe:	da 01       	movw	r26, r20
     800:	c9 01       	movw	r24, r18
     802:	88 27       	eor	r24, r24
     804:	b7 fd       	sbrc	r27, 7
     806:	83 95       	inc	r24
     808:	99 27       	eor	r25, r25
     80a:	aa 27       	eor	r26, r26
     80c:	bb 27       	eor	r27, r27
     80e:	b8 2e       	mov	r11, r24
     810:	21 15       	cp	r18, r1
     812:	31 05       	cpc	r19, r1
     814:	41 05       	cpc	r20, r1
     816:	51 05       	cpc	r21, r1
     818:	19 f4       	brne	.+6      	; 0x820 <__floatsisf+0x36>
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	3a c0       	rjmp	.+116    	; 0x894 <__stack+0x35>
     820:	88 23       	and	r24, r24
     822:	a9 f0       	breq	.+42     	; 0x84e <__floatsisf+0x64>
     824:	20 30       	cpi	r18, 0x00	; 0
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	38 07       	cpc	r19, r24
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	48 07       	cpc	r20, r24
     82e:	80 e8       	ldi	r24, 0x80	; 128
     830:	58 07       	cpc	r21, r24
     832:	29 f4       	brne	.+10     	; 0x83e <__floatsisf+0x54>
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	9f ec       	ldi	r25, 0xCF	; 207
     83c:	30 c0       	rjmp	.+96     	; 0x89e <__stack+0x3f>
     83e:	ee 24       	eor	r14, r14
     840:	ff 24       	eor	r15, r15
     842:	87 01       	movw	r16, r14
     844:	e2 1a       	sub	r14, r18
     846:	f3 0a       	sbc	r15, r19
     848:	04 0b       	sbc	r16, r20
     84a:	15 0b       	sbc	r17, r21
     84c:	02 c0       	rjmp	.+4      	; 0x852 <__floatsisf+0x68>
     84e:	79 01       	movw	r14, r18
     850:	8a 01       	movw	r16, r20
     852:	8e e1       	ldi	r24, 0x1E	; 30
     854:	c8 2e       	mov	r12, r24
     856:	d1 2c       	mov	r13, r1
     858:	dc 82       	std	Y+4, r13	; 0x04
     85a:	cb 82       	std	Y+3, r12	; 0x03
     85c:	ed 82       	std	Y+5, r14	; 0x05
     85e:	fe 82       	std	Y+6, r15	; 0x06
     860:	0f 83       	std	Y+7, r16	; 0x07
     862:	18 87       	std	Y+8, r17	; 0x08
     864:	c8 01       	movw	r24, r16
     866:	b7 01       	movw	r22, r14
     868:	0e 94 a7 04 	call	0x94e	; 0x94e <__clzsi2>
     86c:	01 97       	sbiw	r24, 0x01	; 1
     86e:	18 16       	cp	r1, r24
     870:	19 06       	cpc	r1, r25
     872:	84 f4       	brge	.+32     	; 0x894 <__stack+0x35>
     874:	08 2e       	mov	r0, r24
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	ee 0c       	add	r14, r14
     87a:	ff 1c       	adc	r15, r15
     87c:	00 1f       	adc	r16, r16
     87e:	11 1f       	adc	r17, r17
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	ed 82       	std	Y+5, r14	; 0x05
     886:	fe 82       	std	Y+6, r15	; 0x06
     888:	0f 83       	std	Y+7, r16	; 0x07
     88a:	18 87       	std	Y+8, r17	; 0x08
     88c:	c8 1a       	sub	r12, r24
     88e:	d9 0a       	sbc	r13, r25
     890:	dc 82       	std	Y+4, r13	; 0x04
     892:	cb 82       	std	Y+3, r12	; 0x03
     894:	ba 82       	std	Y+2, r11	; 0x02
     896:	ce 01       	movw	r24, r28
     898:	01 96       	adiw	r24, 0x01	; 1
     89a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__pack_f>
     89e:	28 96       	adiw	r28, 0x08	; 8
     8a0:	e9 e0       	ldi	r30, 0x09	; 9
     8a2:	0c 94 89 10 	jmp	0x2112	; 0x2112 <__epilogue_restores__+0x12>

000008a6 <__fixsfsi>:
     8a6:	ac e0       	ldi	r26, 0x0C	; 12
     8a8:	b0 e0       	ldi	r27, 0x00	; 0
     8aa:	e9 e5       	ldi	r30, 0x59	; 89
     8ac:	f4 e0       	ldi	r31, 0x04	; 4
     8ae:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <__prologue_saves__+0x20>
     8b2:	69 83       	std	Y+1, r22	; 0x01
     8b4:	7a 83       	std	Y+2, r23	; 0x02
     8b6:	8b 83       	std	Y+3, r24	; 0x03
     8b8:	9c 83       	std	Y+4, r25	; 0x04
     8ba:	ce 01       	movw	r24, r28
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	be 01       	movw	r22, r28
     8c0:	6b 5f       	subi	r22, 0xFB	; 251
     8c2:	7f 4f       	sbci	r23, 0xFF	; 255
     8c4:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     8c8:	8d 81       	ldd	r24, Y+5	; 0x05
     8ca:	82 30       	cpi	r24, 0x02	; 2
     8cc:	61 f1       	breq	.+88     	; 0x926 <__fixsfsi+0x80>
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	50 f1       	brcs	.+84     	; 0x926 <__fixsfsi+0x80>
     8d2:	84 30       	cpi	r24, 0x04	; 4
     8d4:	21 f4       	brne	.+8      	; 0x8de <__fixsfsi+0x38>
     8d6:	8e 81       	ldd	r24, Y+6	; 0x06
     8d8:	88 23       	and	r24, r24
     8da:	51 f1       	breq	.+84     	; 0x930 <__fixsfsi+0x8a>
     8dc:	2e c0       	rjmp	.+92     	; 0x93a <__fixsfsi+0x94>
     8de:	2f 81       	ldd	r18, Y+7	; 0x07
     8e0:	38 85       	ldd	r19, Y+8	; 0x08
     8e2:	37 fd       	sbrc	r19, 7
     8e4:	20 c0       	rjmp	.+64     	; 0x926 <__fixsfsi+0x80>
     8e6:	6e 81       	ldd	r22, Y+6	; 0x06
     8e8:	2f 31       	cpi	r18, 0x1F	; 31
     8ea:	31 05       	cpc	r19, r1
     8ec:	1c f0       	brlt	.+6      	; 0x8f4 <__fixsfsi+0x4e>
     8ee:	66 23       	and	r22, r22
     8f0:	f9 f0       	breq	.+62     	; 0x930 <__fixsfsi+0x8a>
     8f2:	23 c0       	rjmp	.+70     	; 0x93a <__fixsfsi+0x94>
     8f4:	8e e1       	ldi	r24, 0x1E	; 30
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	82 1b       	sub	r24, r18
     8fa:	93 0b       	sbc	r25, r19
     8fc:	29 85       	ldd	r18, Y+9	; 0x09
     8fe:	3a 85       	ldd	r19, Y+10	; 0x0a
     900:	4b 85       	ldd	r20, Y+11	; 0x0b
     902:	5c 85       	ldd	r21, Y+12	; 0x0c
     904:	04 c0       	rjmp	.+8      	; 0x90e <__fixsfsi+0x68>
     906:	56 95       	lsr	r21
     908:	47 95       	ror	r20
     90a:	37 95       	ror	r19
     90c:	27 95       	ror	r18
     90e:	8a 95       	dec	r24
     910:	d2 f7       	brpl	.-12     	; 0x906 <__fixsfsi+0x60>
     912:	66 23       	and	r22, r22
     914:	b1 f0       	breq	.+44     	; 0x942 <__fixsfsi+0x9c>
     916:	50 95       	com	r21
     918:	40 95       	com	r20
     91a:	30 95       	com	r19
     91c:	21 95       	neg	r18
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	4f 4f       	sbci	r20, 0xFF	; 255
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	0e c0       	rjmp	.+28     	; 0x942 <__fixsfsi+0x9c>
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	40 e0       	ldi	r20, 0x00	; 0
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	09 c0       	rjmp	.+18     	; 0x942 <__fixsfsi+0x9c>
     930:	2f ef       	ldi	r18, 0xFF	; 255
     932:	3f ef       	ldi	r19, 0xFF	; 255
     934:	4f ef       	ldi	r20, 0xFF	; 255
     936:	5f e7       	ldi	r21, 0x7F	; 127
     938:	04 c0       	rjmp	.+8      	; 0x942 <__fixsfsi+0x9c>
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	50 e8       	ldi	r21, 0x80	; 128
     942:	b9 01       	movw	r22, r18
     944:	ca 01       	movw	r24, r20
     946:	2c 96       	adiw	r28, 0x0c	; 12
     948:	e2 e0       	ldi	r30, 0x02	; 2
     94a:	0c 94 90 10 	jmp	0x2120	; 0x2120 <__epilogue_restores__+0x20>

0000094e <__clzsi2>:
     94e:	ef 92       	push	r14
     950:	ff 92       	push	r15
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	7b 01       	movw	r14, r22
     958:	8c 01       	movw	r16, r24
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	e8 16       	cp	r14, r24
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	f8 06       	cpc	r15, r24
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	08 07       	cpc	r16, r24
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	18 07       	cpc	r17, r24
     96a:	88 f4       	brcc	.+34     	; 0x98e <__clzsi2+0x40>
     96c:	8f ef       	ldi	r24, 0xFF	; 255
     96e:	e8 16       	cp	r14, r24
     970:	f1 04       	cpc	r15, r1
     972:	01 05       	cpc	r16, r1
     974:	11 05       	cpc	r17, r1
     976:	31 f0       	breq	.+12     	; 0x984 <__clzsi2+0x36>
     978:	28 f0       	brcs	.+10     	; 0x984 <__clzsi2+0x36>
     97a:	88 e0       	ldi	r24, 0x08	; 8
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	a0 e0       	ldi	r26, 0x00	; 0
     980:	b0 e0       	ldi	r27, 0x00	; 0
     982:	17 c0       	rjmp	.+46     	; 0x9b2 <__clzsi2+0x64>
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	a0 e0       	ldi	r26, 0x00	; 0
     98a:	b0 e0       	ldi	r27, 0x00	; 0
     98c:	12 c0       	rjmp	.+36     	; 0x9b2 <__clzsi2+0x64>
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	e8 16       	cp	r14, r24
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	f8 06       	cpc	r15, r24
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	08 07       	cpc	r16, r24
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	18 07       	cpc	r17, r24
     99e:	28 f0       	brcs	.+10     	; 0x9aa <__clzsi2+0x5c>
     9a0:	88 e1       	ldi	r24, 0x18	; 24
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	a0 e0       	ldi	r26, 0x00	; 0
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	04 c0       	rjmp	.+8      	; 0x9b2 <__clzsi2+0x64>
     9aa:	80 e1       	ldi	r24, 0x10	; 16
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	a0 e0       	ldi	r26, 0x00	; 0
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	20 e2       	ldi	r18, 0x20	; 32
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	40 e0       	ldi	r20, 0x00	; 0
     9b8:	50 e0       	ldi	r21, 0x00	; 0
     9ba:	28 1b       	sub	r18, r24
     9bc:	39 0b       	sbc	r19, r25
     9be:	4a 0b       	sbc	r20, r26
     9c0:	5b 0b       	sbc	r21, r27
     9c2:	04 c0       	rjmp	.+8      	; 0x9cc <__clzsi2+0x7e>
     9c4:	16 95       	lsr	r17
     9c6:	07 95       	ror	r16
     9c8:	f7 94       	ror	r15
     9ca:	e7 94       	ror	r14
     9cc:	8a 95       	dec	r24
     9ce:	d2 f7       	brpl	.-12     	; 0x9c4 <__clzsi2+0x76>
     9d0:	f7 01       	movw	r30, r14
     9d2:	e8 59       	subi	r30, 0x98	; 152
     9d4:	ff 4f       	sbci	r31, 0xFF	; 255
     9d6:	80 81       	ld	r24, Z
     9d8:	28 1b       	sub	r18, r24
     9da:	31 09       	sbc	r19, r1
     9dc:	41 09       	sbc	r20, r1
     9de:	51 09       	sbc	r21, r1
     9e0:	c9 01       	movw	r24, r18
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	08 95       	ret

000009ec <__pack_f>:
     9ec:	df 92       	push	r13
     9ee:	ef 92       	push	r14
     9f0:	ff 92       	push	r15
     9f2:	0f 93       	push	r16
     9f4:	1f 93       	push	r17
     9f6:	fc 01       	movw	r30, r24
     9f8:	e4 80       	ldd	r14, Z+4	; 0x04
     9fa:	f5 80       	ldd	r15, Z+5	; 0x05
     9fc:	06 81       	ldd	r16, Z+6	; 0x06
     9fe:	17 81       	ldd	r17, Z+7	; 0x07
     a00:	d1 80       	ldd	r13, Z+1	; 0x01
     a02:	80 81       	ld	r24, Z
     a04:	82 30       	cpi	r24, 0x02	; 2
     a06:	48 f4       	brcc	.+18     	; 0xa1a <__pack_f+0x2e>
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e1       	ldi	r26, 0x10	; 16
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	e8 2a       	or	r14, r24
     a12:	f9 2a       	or	r15, r25
     a14:	0a 2b       	or	r16, r26
     a16:	1b 2b       	or	r17, r27
     a18:	a5 c0       	rjmp	.+330    	; 0xb64 <__pack_f+0x178>
     a1a:	84 30       	cpi	r24, 0x04	; 4
     a1c:	09 f4       	brne	.+2      	; 0xa20 <__pack_f+0x34>
     a1e:	9f c0       	rjmp	.+318    	; 0xb5e <__pack_f+0x172>
     a20:	82 30       	cpi	r24, 0x02	; 2
     a22:	21 f4       	brne	.+8      	; 0xa2c <__pack_f+0x40>
     a24:	ee 24       	eor	r14, r14
     a26:	ff 24       	eor	r15, r15
     a28:	87 01       	movw	r16, r14
     a2a:	05 c0       	rjmp	.+10     	; 0xa36 <__pack_f+0x4a>
     a2c:	e1 14       	cp	r14, r1
     a2e:	f1 04       	cpc	r15, r1
     a30:	01 05       	cpc	r16, r1
     a32:	11 05       	cpc	r17, r1
     a34:	19 f4       	brne	.+6      	; 0xa3c <__pack_f+0x50>
     a36:	e0 e0       	ldi	r30, 0x00	; 0
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	96 c0       	rjmp	.+300    	; 0xb68 <__pack_f+0x17c>
     a3c:	62 81       	ldd	r22, Z+2	; 0x02
     a3e:	73 81       	ldd	r23, Z+3	; 0x03
     a40:	9f ef       	ldi	r25, 0xFF	; 255
     a42:	62 38       	cpi	r22, 0x82	; 130
     a44:	79 07       	cpc	r23, r25
     a46:	0c f0       	brlt	.+2      	; 0xa4a <__pack_f+0x5e>
     a48:	5b c0       	rjmp	.+182    	; 0xb00 <__pack_f+0x114>
     a4a:	22 e8       	ldi	r18, 0x82	; 130
     a4c:	3f ef       	ldi	r19, 0xFF	; 255
     a4e:	26 1b       	sub	r18, r22
     a50:	37 0b       	sbc	r19, r23
     a52:	2a 31       	cpi	r18, 0x1A	; 26
     a54:	31 05       	cpc	r19, r1
     a56:	2c f0       	brlt	.+10     	; 0xa62 <__pack_f+0x76>
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	40 e0       	ldi	r20, 0x00	; 0
     a5e:	50 e0       	ldi	r21, 0x00	; 0
     a60:	2a c0       	rjmp	.+84     	; 0xab6 <__pack_f+0xca>
     a62:	b8 01       	movw	r22, r16
     a64:	a7 01       	movw	r20, r14
     a66:	02 2e       	mov	r0, r18
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__pack_f+0x86>
     a6a:	76 95       	lsr	r23
     a6c:	67 95       	ror	r22
     a6e:	57 95       	ror	r21
     a70:	47 95       	ror	r20
     a72:	0a 94       	dec	r0
     a74:	d2 f7       	brpl	.-12     	; 0xa6a <__pack_f+0x7e>
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	04 c0       	rjmp	.+8      	; 0xa88 <__pack_f+0x9c>
     a80:	88 0f       	add	r24, r24
     a82:	99 1f       	adc	r25, r25
     a84:	aa 1f       	adc	r26, r26
     a86:	bb 1f       	adc	r27, r27
     a88:	2a 95       	dec	r18
     a8a:	d2 f7       	brpl	.-12     	; 0xa80 <__pack_f+0x94>
     a8c:	01 97       	sbiw	r24, 0x01	; 1
     a8e:	a1 09       	sbc	r26, r1
     a90:	b1 09       	sbc	r27, r1
     a92:	8e 21       	and	r24, r14
     a94:	9f 21       	and	r25, r15
     a96:	a0 23       	and	r26, r16
     a98:	b1 23       	and	r27, r17
     a9a:	00 97       	sbiw	r24, 0x00	; 0
     a9c:	a1 05       	cpc	r26, r1
     a9e:	b1 05       	cpc	r27, r1
     aa0:	21 f0       	breq	.+8      	; 0xaaa <__pack_f+0xbe>
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	a0 e0       	ldi	r26, 0x00	; 0
     aa8:	b0 e0       	ldi	r27, 0x00	; 0
     aaa:	9a 01       	movw	r18, r20
     aac:	ab 01       	movw	r20, r22
     aae:	28 2b       	or	r18, r24
     ab0:	39 2b       	or	r19, r25
     ab2:	4a 2b       	or	r20, r26
     ab4:	5b 2b       	or	r21, r27
     ab6:	da 01       	movw	r26, r20
     ab8:	c9 01       	movw	r24, r18
     aba:	8f 77       	andi	r24, 0x7F	; 127
     abc:	90 70       	andi	r25, 0x00	; 0
     abe:	a0 70       	andi	r26, 0x00	; 0
     ac0:	b0 70       	andi	r27, 0x00	; 0
     ac2:	80 34       	cpi	r24, 0x40	; 64
     ac4:	91 05       	cpc	r25, r1
     ac6:	a1 05       	cpc	r26, r1
     ac8:	b1 05       	cpc	r27, r1
     aca:	39 f4       	brne	.+14     	; 0xada <__pack_f+0xee>
     acc:	27 ff       	sbrs	r18, 7
     ace:	09 c0       	rjmp	.+18     	; 0xae2 <__pack_f+0xf6>
     ad0:	20 5c       	subi	r18, 0xC0	; 192
     ad2:	3f 4f       	sbci	r19, 0xFF	; 255
     ad4:	4f 4f       	sbci	r20, 0xFF	; 255
     ad6:	5f 4f       	sbci	r21, 0xFF	; 255
     ad8:	04 c0       	rjmp	.+8      	; 0xae2 <__pack_f+0xf6>
     ada:	21 5c       	subi	r18, 0xC1	; 193
     adc:	3f 4f       	sbci	r19, 0xFF	; 255
     ade:	4f 4f       	sbci	r20, 0xFF	; 255
     ae0:	5f 4f       	sbci	r21, 0xFF	; 255
     ae2:	e0 e0       	ldi	r30, 0x00	; 0
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	20 30       	cpi	r18, 0x00	; 0
     ae8:	a0 e0       	ldi	r26, 0x00	; 0
     aea:	3a 07       	cpc	r19, r26
     aec:	a0 e0       	ldi	r26, 0x00	; 0
     aee:	4a 07       	cpc	r20, r26
     af0:	a0 e4       	ldi	r26, 0x40	; 64
     af2:	5a 07       	cpc	r21, r26
     af4:	10 f0       	brcs	.+4      	; 0xafa <__pack_f+0x10e>
     af6:	e1 e0       	ldi	r30, 0x01	; 1
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	79 01       	movw	r14, r18
     afc:	8a 01       	movw	r16, r20
     afe:	27 c0       	rjmp	.+78     	; 0xb4e <__pack_f+0x162>
     b00:	60 38       	cpi	r22, 0x80	; 128
     b02:	71 05       	cpc	r23, r1
     b04:	64 f5       	brge	.+88     	; 0xb5e <__pack_f+0x172>
     b06:	fb 01       	movw	r30, r22
     b08:	e1 58       	subi	r30, 0x81	; 129
     b0a:	ff 4f       	sbci	r31, 0xFF	; 255
     b0c:	d8 01       	movw	r26, r16
     b0e:	c7 01       	movw	r24, r14
     b10:	8f 77       	andi	r24, 0x7F	; 127
     b12:	90 70       	andi	r25, 0x00	; 0
     b14:	a0 70       	andi	r26, 0x00	; 0
     b16:	b0 70       	andi	r27, 0x00	; 0
     b18:	80 34       	cpi	r24, 0x40	; 64
     b1a:	91 05       	cpc	r25, r1
     b1c:	a1 05       	cpc	r26, r1
     b1e:	b1 05       	cpc	r27, r1
     b20:	39 f4       	brne	.+14     	; 0xb30 <__pack_f+0x144>
     b22:	e7 fe       	sbrs	r14, 7
     b24:	0d c0       	rjmp	.+26     	; 0xb40 <__pack_f+0x154>
     b26:	80 e4       	ldi	r24, 0x40	; 64
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	04 c0       	rjmp	.+8      	; 0xb38 <__pack_f+0x14c>
     b30:	8f e3       	ldi	r24, 0x3F	; 63
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	a0 e0       	ldi	r26, 0x00	; 0
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	e8 0e       	add	r14, r24
     b3a:	f9 1e       	adc	r15, r25
     b3c:	0a 1f       	adc	r16, r26
     b3e:	1b 1f       	adc	r17, r27
     b40:	17 ff       	sbrs	r17, 7
     b42:	05 c0       	rjmp	.+10     	; 0xb4e <__pack_f+0x162>
     b44:	16 95       	lsr	r17
     b46:	07 95       	ror	r16
     b48:	f7 94       	ror	r15
     b4a:	e7 94       	ror	r14
     b4c:	31 96       	adiw	r30, 0x01	; 1
     b4e:	87 e0       	ldi	r24, 0x07	; 7
     b50:	16 95       	lsr	r17
     b52:	07 95       	ror	r16
     b54:	f7 94       	ror	r15
     b56:	e7 94       	ror	r14
     b58:	8a 95       	dec	r24
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__pack_f+0x164>
     b5c:	05 c0       	rjmp	.+10     	; 0xb68 <__pack_f+0x17c>
     b5e:	ee 24       	eor	r14, r14
     b60:	ff 24       	eor	r15, r15
     b62:	87 01       	movw	r16, r14
     b64:	ef ef       	ldi	r30, 0xFF	; 255
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	6e 2f       	mov	r22, r30
     b6a:	67 95       	ror	r22
     b6c:	66 27       	eor	r22, r22
     b6e:	67 95       	ror	r22
     b70:	90 2f       	mov	r25, r16
     b72:	9f 77       	andi	r25, 0x7F	; 127
     b74:	d7 94       	ror	r13
     b76:	dd 24       	eor	r13, r13
     b78:	d7 94       	ror	r13
     b7a:	8e 2f       	mov	r24, r30
     b7c:	86 95       	lsr	r24
     b7e:	49 2f       	mov	r20, r25
     b80:	46 2b       	or	r20, r22
     b82:	58 2f       	mov	r21, r24
     b84:	5d 29       	or	r21, r13
     b86:	b7 01       	movw	r22, r14
     b88:	ca 01       	movw	r24, r20
     b8a:	1f 91       	pop	r17
     b8c:	0f 91       	pop	r16
     b8e:	ff 90       	pop	r15
     b90:	ef 90       	pop	r14
     b92:	df 90       	pop	r13
     b94:	08 95       	ret

00000b96 <__unpack_f>:
     b96:	fc 01       	movw	r30, r24
     b98:	db 01       	movw	r26, r22
     b9a:	40 81       	ld	r20, Z
     b9c:	51 81       	ldd	r21, Z+1	; 0x01
     b9e:	22 81       	ldd	r18, Z+2	; 0x02
     ba0:	62 2f       	mov	r22, r18
     ba2:	6f 77       	andi	r22, 0x7F	; 127
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	22 1f       	adc	r18, r18
     ba8:	22 27       	eor	r18, r18
     baa:	22 1f       	adc	r18, r18
     bac:	93 81       	ldd	r25, Z+3	; 0x03
     bae:	89 2f       	mov	r24, r25
     bb0:	88 0f       	add	r24, r24
     bb2:	82 2b       	or	r24, r18
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	99 1f       	adc	r25, r25
     bba:	99 27       	eor	r25, r25
     bbc:	99 1f       	adc	r25, r25
     bbe:	11 96       	adiw	r26, 0x01	; 1
     bc0:	9c 93       	st	X, r25
     bc2:	11 97       	sbiw	r26, 0x01	; 1
     bc4:	21 15       	cp	r18, r1
     bc6:	31 05       	cpc	r19, r1
     bc8:	a9 f5       	brne	.+106    	; 0xc34 <__unpack_f+0x9e>
     bca:	41 15       	cp	r20, r1
     bcc:	51 05       	cpc	r21, r1
     bce:	61 05       	cpc	r22, r1
     bd0:	71 05       	cpc	r23, r1
     bd2:	11 f4       	brne	.+4      	; 0xbd8 <__unpack_f+0x42>
     bd4:	82 e0       	ldi	r24, 0x02	; 2
     bd6:	37 c0       	rjmp	.+110    	; 0xc46 <__unpack_f+0xb0>
     bd8:	82 e8       	ldi	r24, 0x82	; 130
     bda:	9f ef       	ldi	r25, 0xFF	; 255
     bdc:	13 96       	adiw	r26, 0x03	; 3
     bde:	9c 93       	st	X, r25
     be0:	8e 93       	st	-X, r24
     be2:	12 97       	sbiw	r26, 0x02	; 2
     be4:	9a 01       	movw	r18, r20
     be6:	ab 01       	movw	r20, r22
     be8:	67 e0       	ldi	r22, 0x07	; 7
     bea:	22 0f       	add	r18, r18
     bec:	33 1f       	adc	r19, r19
     bee:	44 1f       	adc	r20, r20
     bf0:	55 1f       	adc	r21, r21
     bf2:	6a 95       	dec	r22
     bf4:	d1 f7       	brne	.-12     	; 0xbea <__unpack_f+0x54>
     bf6:	83 e0       	ldi	r24, 0x03	; 3
     bf8:	8c 93       	st	X, r24
     bfa:	0d c0       	rjmp	.+26     	; 0xc16 <__unpack_f+0x80>
     bfc:	22 0f       	add	r18, r18
     bfe:	33 1f       	adc	r19, r19
     c00:	44 1f       	adc	r20, r20
     c02:	55 1f       	adc	r21, r21
     c04:	12 96       	adiw	r26, 0x02	; 2
     c06:	8d 91       	ld	r24, X+
     c08:	9c 91       	ld	r25, X
     c0a:	13 97       	sbiw	r26, 0x03	; 3
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	13 96       	adiw	r26, 0x03	; 3
     c10:	9c 93       	st	X, r25
     c12:	8e 93       	st	-X, r24
     c14:	12 97       	sbiw	r26, 0x02	; 2
     c16:	20 30       	cpi	r18, 0x00	; 0
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	38 07       	cpc	r19, r24
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	48 07       	cpc	r20, r24
     c20:	80 e4       	ldi	r24, 0x40	; 64
     c22:	58 07       	cpc	r21, r24
     c24:	58 f3       	brcs	.-42     	; 0xbfc <__unpack_f+0x66>
     c26:	14 96       	adiw	r26, 0x04	; 4
     c28:	2d 93       	st	X+, r18
     c2a:	3d 93       	st	X+, r19
     c2c:	4d 93       	st	X+, r20
     c2e:	5c 93       	st	X, r21
     c30:	17 97       	sbiw	r26, 0x07	; 7
     c32:	08 95       	ret
     c34:	2f 3f       	cpi	r18, 0xFF	; 255
     c36:	31 05       	cpc	r19, r1
     c38:	79 f4       	brne	.+30     	; 0xc58 <__unpack_f+0xc2>
     c3a:	41 15       	cp	r20, r1
     c3c:	51 05       	cpc	r21, r1
     c3e:	61 05       	cpc	r22, r1
     c40:	71 05       	cpc	r23, r1
     c42:	19 f4       	brne	.+6      	; 0xc4a <__unpack_f+0xb4>
     c44:	84 e0       	ldi	r24, 0x04	; 4
     c46:	8c 93       	st	X, r24
     c48:	08 95       	ret
     c4a:	64 ff       	sbrs	r22, 4
     c4c:	03 c0       	rjmp	.+6      	; 0xc54 <__unpack_f+0xbe>
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	8c 93       	st	X, r24
     c52:	12 c0       	rjmp	.+36     	; 0xc78 <__unpack_f+0xe2>
     c54:	1c 92       	st	X, r1
     c56:	10 c0       	rjmp	.+32     	; 0xc78 <__unpack_f+0xe2>
     c58:	2f 57       	subi	r18, 0x7F	; 127
     c5a:	30 40       	sbci	r19, 0x00	; 0
     c5c:	13 96       	adiw	r26, 0x03	; 3
     c5e:	3c 93       	st	X, r19
     c60:	2e 93       	st	-X, r18
     c62:	12 97       	sbiw	r26, 0x02	; 2
     c64:	83 e0       	ldi	r24, 0x03	; 3
     c66:	8c 93       	st	X, r24
     c68:	87 e0       	ldi	r24, 0x07	; 7
     c6a:	44 0f       	add	r20, r20
     c6c:	55 1f       	adc	r21, r21
     c6e:	66 1f       	adc	r22, r22
     c70:	77 1f       	adc	r23, r23
     c72:	8a 95       	dec	r24
     c74:	d1 f7       	brne	.-12     	; 0xc6a <__unpack_f+0xd4>
     c76:	70 64       	ori	r23, 0x40	; 64
     c78:	14 96       	adiw	r26, 0x04	; 4
     c7a:	4d 93       	st	X+, r20
     c7c:	5d 93       	st	X+, r21
     c7e:	6d 93       	st	X+, r22
     c80:	7c 93       	st	X, r23
     c82:	17 97       	sbiw	r26, 0x07	; 7
     c84:	08 95       	ret

00000c86 <__fpcmp_parts_f>:
     c86:	1f 93       	push	r17
     c88:	dc 01       	movw	r26, r24
     c8a:	fb 01       	movw	r30, r22
     c8c:	9c 91       	ld	r25, X
     c8e:	92 30       	cpi	r25, 0x02	; 2
     c90:	08 f4       	brcc	.+2      	; 0xc94 <__fpcmp_parts_f+0xe>
     c92:	47 c0       	rjmp	.+142    	; 0xd22 <__fpcmp_parts_f+0x9c>
     c94:	80 81       	ld	r24, Z
     c96:	82 30       	cpi	r24, 0x02	; 2
     c98:	08 f4       	brcc	.+2      	; 0xc9c <__fpcmp_parts_f+0x16>
     c9a:	43 c0       	rjmp	.+134    	; 0xd22 <__fpcmp_parts_f+0x9c>
     c9c:	94 30       	cpi	r25, 0x04	; 4
     c9e:	51 f4       	brne	.+20     	; 0xcb4 <__fpcmp_parts_f+0x2e>
     ca0:	11 96       	adiw	r26, 0x01	; 1
     ca2:	1c 91       	ld	r17, X
     ca4:	84 30       	cpi	r24, 0x04	; 4
     ca6:	99 f5       	brne	.+102    	; 0xd0e <__fpcmp_parts_f+0x88>
     ca8:	81 81       	ldd	r24, Z+1	; 0x01
     caa:	68 2f       	mov	r22, r24
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	61 1b       	sub	r22, r17
     cb0:	71 09       	sbc	r23, r1
     cb2:	3f c0       	rjmp	.+126    	; 0xd32 <__fpcmp_parts_f+0xac>
     cb4:	84 30       	cpi	r24, 0x04	; 4
     cb6:	21 f0       	breq	.+8      	; 0xcc0 <__fpcmp_parts_f+0x3a>
     cb8:	92 30       	cpi	r25, 0x02	; 2
     cba:	31 f4       	brne	.+12     	; 0xcc8 <__fpcmp_parts_f+0x42>
     cbc:	82 30       	cpi	r24, 0x02	; 2
     cbe:	b9 f1       	breq	.+110    	; 0xd2e <__fpcmp_parts_f+0xa8>
     cc0:	81 81       	ldd	r24, Z+1	; 0x01
     cc2:	88 23       	and	r24, r24
     cc4:	89 f1       	breq	.+98     	; 0xd28 <__fpcmp_parts_f+0xa2>
     cc6:	2d c0       	rjmp	.+90     	; 0xd22 <__fpcmp_parts_f+0x9c>
     cc8:	11 96       	adiw	r26, 0x01	; 1
     cca:	1c 91       	ld	r17, X
     ccc:	11 97       	sbiw	r26, 0x01	; 1
     cce:	82 30       	cpi	r24, 0x02	; 2
     cd0:	f1 f0       	breq	.+60     	; 0xd0e <__fpcmp_parts_f+0x88>
     cd2:	81 81       	ldd	r24, Z+1	; 0x01
     cd4:	18 17       	cp	r17, r24
     cd6:	d9 f4       	brne	.+54     	; 0xd0e <__fpcmp_parts_f+0x88>
     cd8:	12 96       	adiw	r26, 0x02	; 2
     cda:	2d 91       	ld	r18, X+
     cdc:	3c 91       	ld	r19, X
     cde:	13 97       	sbiw	r26, 0x03	; 3
     ce0:	82 81       	ldd	r24, Z+2	; 0x02
     ce2:	93 81       	ldd	r25, Z+3	; 0x03
     ce4:	82 17       	cp	r24, r18
     ce6:	93 07       	cpc	r25, r19
     ce8:	94 f0       	brlt	.+36     	; 0xd0e <__fpcmp_parts_f+0x88>
     cea:	28 17       	cp	r18, r24
     cec:	39 07       	cpc	r19, r25
     cee:	bc f0       	brlt	.+46     	; 0xd1e <__fpcmp_parts_f+0x98>
     cf0:	14 96       	adiw	r26, 0x04	; 4
     cf2:	8d 91       	ld	r24, X+
     cf4:	9d 91       	ld	r25, X+
     cf6:	0d 90       	ld	r0, X+
     cf8:	bc 91       	ld	r27, X
     cfa:	a0 2d       	mov	r26, r0
     cfc:	24 81       	ldd	r18, Z+4	; 0x04
     cfe:	35 81       	ldd	r19, Z+5	; 0x05
     d00:	46 81       	ldd	r20, Z+6	; 0x06
     d02:	57 81       	ldd	r21, Z+7	; 0x07
     d04:	28 17       	cp	r18, r24
     d06:	39 07       	cpc	r19, r25
     d08:	4a 07       	cpc	r20, r26
     d0a:	5b 07       	cpc	r21, r27
     d0c:	18 f4       	brcc	.+6      	; 0xd14 <__fpcmp_parts_f+0x8e>
     d0e:	11 23       	and	r17, r17
     d10:	41 f0       	breq	.+16     	; 0xd22 <__fpcmp_parts_f+0x9c>
     d12:	0a c0       	rjmp	.+20     	; 0xd28 <__fpcmp_parts_f+0xa2>
     d14:	82 17       	cp	r24, r18
     d16:	93 07       	cpc	r25, r19
     d18:	a4 07       	cpc	r26, r20
     d1a:	b5 07       	cpc	r27, r21
     d1c:	40 f4       	brcc	.+16     	; 0xd2e <__fpcmp_parts_f+0xa8>
     d1e:	11 23       	and	r17, r17
     d20:	19 f0       	breq	.+6      	; 0xd28 <__fpcmp_parts_f+0xa2>
     d22:	61 e0       	ldi	r22, 0x01	; 1
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	05 c0       	rjmp	.+10     	; 0xd32 <__fpcmp_parts_f+0xac>
     d28:	6f ef       	ldi	r22, 0xFF	; 255
     d2a:	7f ef       	ldi	r23, 0xFF	; 255
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <__fpcmp_parts_f+0xac>
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	cb 01       	movw	r24, r22
     d34:	1f 91       	pop	r17
     d36:	08 95       	ret

00000d38 <DcMotor_Init>:
#include "gpio.h"
#include "common_macros.h"
#include "PWM.h"

void DcMotor_Init(void)
{
     d38:	df 93       	push	r29
     d3a:	cf 93       	push	r28
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
	/* The First two lines is responsible for making the two pins as output pins */
	GPIO_setupPinDirection(PORTA_ID,PIN0_ID,PIN_OUTPUT);
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	60 e0       	ldi	r22, 0x00	; 0
     d44:	41 e0       	ldi	r20, 0x01	; 1
     d46:	0e 94 fd 07 	call	0xffa	; 0xffa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTA_ID,PIN1_ID,PIN_OUTPUT);
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	61 e0       	ldi	r22, 0x01	; 1
     d4e:	41 e0       	ldi	r20, 0x01	; 1
     d50:	0e 94 fd 07 	call	0xffa	; 0xffa <GPIO_setupPinDirection>

	/* the following two lines are responsible for making the motor stop at first */

	GPIO_writePin(PORTA_ID,PIN0_ID ,LOGIC_LOW);
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	40 e0       	ldi	r20, 0x00	; 0
     d5a:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <GPIO_writePin>
	GPIO_writePin(PORTA_ID,PIN1_ID ,LOGIC_LOW);
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	61 e0       	ldi	r22, 0x01	; 1
     d62:	40 e0       	ldi	r20, 0x00	; 0
     d64:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <GPIO_writePin>

}
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	08 95       	ret

00000d6e <DcMotor_Rotate>:

void DcMotor_Rotate (DcMotor_State state,uint8 speed)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	00 d0       	rcall	.+0      	; 0xd74 <DcMotor_Rotate+0x6>
     d74:	0f 92       	push	r0
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	8a 83       	std	Y+2, r24	; 0x02
     d7c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 duty_cycle= (uint8) (  (speed/100.0f)*255 ) ;
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	88 2f       	mov	r24, r24
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	aa 27       	eor	r26, r26
     d86:	97 fd       	sbrc	r25, 7
     d88:	a0 95       	com	r26
     d8a:	ba 2f       	mov	r27, r26
     d8c:	bc 01       	movw	r22, r24
     d8e:	cd 01       	movw	r24, r26
     d90:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
     d94:	dc 01       	movw	r26, r24
     d96:	cb 01       	movw	r24, r22
     d98:	bc 01       	movw	r22, r24
     d9a:	cd 01       	movw	r24, r26
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	48 ec       	ldi	r20, 0xC8	; 200
     da2:	52 e4       	ldi	r21, 0x42	; 66
     da4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     da8:	dc 01       	movw	r26, r24
     daa:	cb 01       	movw	r24, r22
     dac:	bc 01       	movw	r22, r24
     dae:	cd 01       	movw	r24, r26
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	4f e7       	ldi	r20, 0x7F	; 127
     db6:	53 e4       	ldi	r21, 0x43	; 67
     db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dbc:	dc 01       	movw	r26, r24
     dbe:	cb 01       	movw	r24, r22
     dc0:	bc 01       	movw	r22, r24
     dc2:	cd 01       	movw	r24, r26
     dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	89 83       	std	Y+1, r24	; 0x01
	PWM_Timer0_Start(duty_cycle); //generate duty cycle
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	0e 94 19 07 	call	0xe32	; 0xe32 <PWM_Timer0_Start>
	if (state == STOP)
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
     dd6:	88 23       	and	r24, r24
     dd8:	59 f4       	brne	.+22     	; 0xdf0 <DcMotor_Rotate+0x82>
	{
		GPIO_writePin(PORTA_ID,PIN0_ID ,LOGIC_LOW);
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	40 e0       	ldi	r20, 0x00	; 0
     de0:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <GPIO_writePin>
		GPIO_writePin(PORTA_ID,PIN1_ID ,LOGIC_LOW);
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	61 e0       	ldi	r22, 0x01	; 1
     de8:	40 e0       	ldi	r20, 0x00	; 0
     dea:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <GPIO_writePin>
     dee:	1b c0       	rjmp	.+54     	; 0xe26 <DcMotor_Rotate+0xb8>
	}
	else if (state == CW)
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	81 30       	cpi	r24, 0x01	; 1
     df4:	59 f4       	brne	.+22     	; 0xe0c <DcMotor_Rotate+0x9e>
	{
		GPIO_writePin(PORTA_ID,PIN0_ID ,LOGIC_HIGH);
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	41 e0       	ldi	r20, 0x01	; 1
     dfc:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <GPIO_writePin>
		GPIO_writePin(PORTA_ID,PIN1_ID ,LOGIC_LOW);
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	61 e0       	ldi	r22, 0x01	; 1
     e04:	40 e0       	ldi	r20, 0x00	; 0
     e06:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <GPIO_writePin>
     e0a:	0d c0       	rjmp	.+26     	; 0xe26 <DcMotor_Rotate+0xb8>
	}
	else if (state == ACW)
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	82 30       	cpi	r24, 0x02	; 2
     e10:	51 f4       	brne	.+20     	; 0xe26 <DcMotor_Rotate+0xb8>
	{
		GPIO_writePin(PORTA_ID,PIN0_ID ,LOGIC_LOW);
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	40 e0       	ldi	r20, 0x00	; 0
     e18:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <GPIO_writePin>
		GPIO_writePin(PORTA_ID,PIN1_ID ,LOGIC_HIGH);
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	61 e0       	ldi	r22, 0x01	; 1
     e20:	41 e0       	ldi	r20, 0x01	; 1
     e22:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <GPIO_writePin>
	}



}
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	cf 91       	pop	r28
     e2e:	df 91       	pop	r29
     e30:	08 95       	ret

00000e32 <PWM_Timer0_Start>:

#include "gpio.h"
#include "PWM.h"
#include <avr/io.h>
void PWM_Timer0_Start(uint8 duty_cycle)
{
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	0f 92       	push	r0
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; //Set Timer Initial value
     e3e:	e2 e5       	ldi	r30, 0x52	; 82
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	10 82       	st	Z, r1

	OCR0  = duty_cycle; // Set Compare Value
     e44:	ec e5       	ldi	r30, 0x5C	; 92
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	80 83       	st	Z, r24

	GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	63 e0       	ldi	r22, 0x03	; 3
     e50:	41 e0       	ldi	r20, 0x01	; 1
     e52:	0e 94 fd 07 	call	0xffa	; 0xffa <GPIO_setupPinDirection>
		 * 1. Fast PWM mode FOC0=0
		 * 2. Fast PWM Mode WGM01=1 & WGM00=1
		 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
		 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
		 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
     e56:	e3 e5       	ldi	r30, 0x53	; 83
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	8a e6       	ldi	r24, 0x6A	; 106
     e5c:	80 83       	st	Z, r24

}
     e5e:	0f 90       	pop	r0
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <Buzzer_init>:
 *
 *******************************************************************************/
#include "buzzer.h"

void Buzzer_init()
{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(buzzer_port, buzzer_pin, PIN_OUTPUT);
     e6e:	83 e0       	ldi	r24, 0x03	; 3
     e70:	64 e0       	ldi	r22, 0x04	; 4
     e72:	41 e0       	ldi	r20, 0x01	; 1
     e74:	0e 94 fd 07 	call	0xffa	; 0xffa <GPIO_setupPinDirection>
	GPIO_writePin(buzzer_port, buzzer_pin, LOGIC_LOW);
     e78:	83 e0       	ldi	r24, 0x03	; 3
     e7a:	64 e0       	ldi	r22, 0x04	; 4
     e7c:	40 e0       	ldi	r20, 0x00	; 0
     e7e:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <GPIO_writePin>


}
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	08 95       	ret

00000e88 <Buzzer_on>:

void Buzzer_on(void)
{
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(buzzer_port, buzzer_pin, LOGIC_HIGH);
     e90:	83 e0       	ldi	r24, 0x03	; 3
     e92:	64 e0       	ldi	r22, 0x04	; 4
     e94:	41 e0       	ldi	r20, 0x01	; 1
     e96:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <GPIO_writePin>


}
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	08 95       	ret

00000ea0 <Buzzer_off>:
void Buzzer_off(void)
{
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62


	GPIO_writePin(buzzer_port, buzzer_pin, LOGIC_LOW);
     ea8:	83 e0       	ldi	r24, 0x03	; 3
     eaa:	64 e0       	ldi	r22, 0x04	; 4
     eac:	40 e0       	ldi	r20, 0x00	; 0
     eae:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <GPIO_writePin>


}
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	08 95       	ret

00000eb8 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	00 d0       	rcall	.+0      	; 0xebe <EEPROM_writeByte+0x6>
     ebe:	00 d0       	rcall	.+0      	; 0xec0 <EEPROM_writeByte+0x8>
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	9a 83       	std	Y+2, r25	; 0x02
     ec6:	89 83       	std	Y+1, r24	; 0x01
     ec8:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     eca:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <TWI_start>
    if (TWI_getStatus() != TWI_START)
     ece:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TWI_getStatus>
     ed2:	88 30       	cpi	r24, 0x08	; 8
     ed4:	11 f0       	breq	.+4      	; 0xeda <EEPROM_writeByte+0x22>
        return ERROR;
     ed6:	1c 82       	std	Y+4, r1	; 0x04
     ed8:	28 c0       	rjmp	.+80     	; 0xf2a <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	9a 81       	ldd	r25, Y+2	; 0x02
     ede:	80 70       	andi	r24, 0x00	; 0
     ee0:	97 70       	andi	r25, 0x07	; 7
     ee2:	88 0f       	add	r24, r24
     ee4:	89 2f       	mov	r24, r25
     ee6:	88 1f       	adc	r24, r24
     ee8:	99 0b       	sbc	r25, r25
     eea:	91 95       	neg	r25
     eec:	80 6a       	ori	r24, 0xA0	; 160
     eee:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     ef2:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TWI_getStatus>
     ef6:	88 31       	cpi	r24, 0x18	; 24
     ef8:	11 f0       	breq	.+4      	; 0xefe <EEPROM_writeByte+0x46>
        return ERROR; 
     efa:	1c 82       	std	Y+4, r1	; 0x04
     efc:	16 c0       	rjmp	.+44     	; 0xf2a <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     f04:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TWI_getStatus>
     f08:	88 32       	cpi	r24, 0x28	; 40
     f0a:	11 f0       	breq	.+4      	; 0xf10 <EEPROM_writeByte+0x58>
        return ERROR;
     f0c:	1c 82       	std	Y+4, r1	; 0x04
     f0e:	0d c0       	rjmp	.+26     	; 0xf2a <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     f16:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TWI_getStatus>
     f1a:	88 32       	cpi	r24, 0x28	; 40
     f1c:	11 f0       	breq	.+4      	; 0xf22 <EEPROM_writeByte+0x6a>
        return ERROR;
     f1e:	1c 82       	std	Y+4, r1	; 0x04
     f20:	04 c0       	rjmp	.+8      	; 0xf2a <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     f22:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <TWI_stop>
	
    return SUCCESS;
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	8c 83       	std	Y+4, r24	; 0x04
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
}
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	cf 91       	pop	r28
     f36:	df 91       	pop	r29
     f38:	08 95       	ret

00000f3a <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     f3a:	df 93       	push	r29
     f3c:	cf 93       	push	r28
     f3e:	00 d0       	rcall	.+0      	; 0xf40 <EEPROM_readByte+0x6>
     f40:	00 d0       	rcall	.+0      	; 0xf42 <EEPROM_readByte+0x8>
     f42:	0f 92       	push	r0
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	9a 83       	std	Y+2, r25	; 0x02
     f4a:	89 83       	std	Y+1, r24	; 0x01
     f4c:	7c 83       	std	Y+4, r23	; 0x04
     f4e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     f50:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <TWI_start>
    if (TWI_getStatus() != TWI_START)
     f54:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TWI_getStatus>
     f58:	88 30       	cpi	r24, 0x08	; 8
     f5a:	11 f0       	breq	.+4      	; 0xf60 <EEPROM_readByte+0x26>
        return ERROR;
     f5c:	1d 82       	std	Y+5, r1	; 0x05
     f5e:	44 c0       	rjmp	.+136    	; 0xfe8 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	9a 81       	ldd	r25, Y+2	; 0x02
     f64:	80 70       	andi	r24, 0x00	; 0
     f66:	97 70       	andi	r25, 0x07	; 7
     f68:	88 0f       	add	r24, r24
     f6a:	89 2f       	mov	r24, r25
     f6c:	88 1f       	adc	r24, r24
     f6e:	99 0b       	sbc	r25, r25
     f70:	91 95       	neg	r25
     f72:	80 6a       	ori	r24, 0xA0	; 160
     f74:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     f78:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TWI_getStatus>
     f7c:	88 31       	cpi	r24, 0x18	; 24
     f7e:	11 f0       	breq	.+4      	; 0xf84 <EEPROM_readByte+0x4a>
        return ERROR;
     f80:	1d 82       	std	Y+5, r1	; 0x05
     f82:	32 c0       	rjmp	.+100    	; 0xfe8 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     f8a:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TWI_getStatus>
     f8e:	88 32       	cpi	r24, 0x28	; 40
     f90:	11 f0       	breq	.+4      	; 0xf96 <EEPROM_readByte+0x5c>
        return ERROR;
     f92:	1d 82       	std	Y+5, r1	; 0x05
     f94:	29 c0       	rjmp	.+82     	; 0xfe8 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     f96:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     f9a:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TWI_getStatus>
     f9e:	80 31       	cpi	r24, 0x10	; 16
     fa0:	11 f0       	breq	.+4      	; 0xfa6 <EEPROM_readByte+0x6c>
        return ERROR;
     fa2:	1d 82       	std	Y+5, r1	; 0x05
     fa4:	21 c0       	rjmp	.+66     	; 0xfe8 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	9a 81       	ldd	r25, Y+2	; 0x02
     faa:	80 70       	andi	r24, 0x00	; 0
     fac:	97 70       	andi	r25, 0x07	; 7
     fae:	88 0f       	add	r24, r24
     fb0:	89 2f       	mov	r24, r25
     fb2:	88 1f       	adc	r24, r24
     fb4:	99 0b       	sbc	r25, r25
     fb6:	91 95       	neg	r25
     fb8:	81 6a       	ori	r24, 0xA1	; 161
     fba:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     fbe:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TWI_getStatus>
     fc2:	80 34       	cpi	r24, 0x40	; 64
     fc4:	11 f0       	breq	.+4      	; 0xfca <EEPROM_readByte+0x90>
        return ERROR;
     fc6:	1d 82       	std	Y+5, r1	; 0x05
     fc8:	0f c0       	rjmp	.+30     	; 0xfe8 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     fca:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <TWI_readByteWithNACK>
     fce:	eb 81       	ldd	r30, Y+3	; 0x03
     fd0:	fc 81       	ldd	r31, Y+4	; 0x04
     fd2:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     fd4:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TWI_getStatus>
     fd8:	88 35       	cpi	r24, 0x58	; 88
     fda:	11 f0       	breq	.+4      	; 0xfe0 <EEPROM_readByte+0xa6>
        return ERROR;
     fdc:	1d 82       	std	Y+5, r1	; 0x05
     fde:	04 c0       	rjmp	.+8      	; 0xfe8 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     fe0:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <TWI_stop>

    return SUCCESS;
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	8d 83       	std	Y+5, r24	; 0x05
     fe8:	8d 81       	ldd	r24, Y+5	; 0x05
}
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     ffa:	df 93       	push	r29
     ffc:	cf 93       	push	r28
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <GPIO_setupPinDirection+0x6>
    1000:	00 d0       	rcall	.+0      	; 0x1002 <GPIO_setupPinDirection+0x8>
    1002:	0f 92       	push	r0
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	89 83       	std	Y+1, r24	; 0x01
    100a:	6a 83       	std	Y+2, r22	; 0x02
    100c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	88 30       	cpi	r24, 0x08	; 8
    1012:	08 f0       	brcs	.+2      	; 0x1016 <GPIO_setupPinDirection+0x1c>
    1014:	d5 c0       	rjmp	.+426    	; 0x11c0 <GPIO_setupPinDirection+0x1c6>
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	84 30       	cpi	r24, 0x04	; 4
    101a:	08 f0       	brcs	.+2      	; 0x101e <GPIO_setupPinDirection+0x24>
    101c:	d1 c0       	rjmp	.+418    	; 0x11c0 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	3d 83       	std	Y+5, r19	; 0x05
    1026:	2c 83       	std	Y+4, r18	; 0x04
    1028:	8c 81       	ldd	r24, Y+4	; 0x04
    102a:	9d 81       	ldd	r25, Y+5	; 0x05
    102c:	81 30       	cpi	r24, 0x01	; 1
    102e:	91 05       	cpc	r25, r1
    1030:	09 f4       	brne	.+2      	; 0x1034 <GPIO_setupPinDirection+0x3a>
    1032:	43 c0       	rjmp	.+134    	; 0x10ba <GPIO_setupPinDirection+0xc0>
    1034:	2c 81       	ldd	r18, Y+4	; 0x04
    1036:	3d 81       	ldd	r19, Y+5	; 0x05
    1038:	22 30       	cpi	r18, 0x02	; 2
    103a:	31 05       	cpc	r19, r1
    103c:	2c f4       	brge	.+10     	; 0x1048 <GPIO_setupPinDirection+0x4e>
    103e:	8c 81       	ldd	r24, Y+4	; 0x04
    1040:	9d 81       	ldd	r25, Y+5	; 0x05
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	71 f0       	breq	.+28     	; 0x1062 <GPIO_setupPinDirection+0x68>
    1046:	bc c0       	rjmp	.+376    	; 0x11c0 <GPIO_setupPinDirection+0x1c6>
    1048:	2c 81       	ldd	r18, Y+4	; 0x04
    104a:	3d 81       	ldd	r19, Y+5	; 0x05
    104c:	22 30       	cpi	r18, 0x02	; 2
    104e:	31 05       	cpc	r19, r1
    1050:	09 f4       	brne	.+2      	; 0x1054 <GPIO_setupPinDirection+0x5a>
    1052:	5f c0       	rjmp	.+190    	; 0x1112 <GPIO_setupPinDirection+0x118>
    1054:	8c 81       	ldd	r24, Y+4	; 0x04
    1056:	9d 81       	ldd	r25, Y+5	; 0x05
    1058:	83 30       	cpi	r24, 0x03	; 3
    105a:	91 05       	cpc	r25, r1
    105c:	09 f4       	brne	.+2      	; 0x1060 <GPIO_setupPinDirection+0x66>
    105e:	85 c0       	rjmp	.+266    	; 0x116a <GPIO_setupPinDirection+0x170>
    1060:	af c0       	rjmp	.+350    	; 0x11c0 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	81 30       	cpi	r24, 0x01	; 1
    1066:	a1 f4       	brne	.+40     	; 0x1090 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1068:	aa e3       	ldi	r26, 0x3A	; 58
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	ea e3       	ldi	r30, 0x3A	; 58
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	48 2f       	mov	r20, r24
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 2e       	mov	r0, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <GPIO_setupPinDirection+0x8c>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	0a 94       	dec	r0
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <GPIO_setupPinDirection+0x88>
    108a:	84 2b       	or	r24, r20
    108c:	8c 93       	st	X, r24
    108e:	98 c0       	rjmp	.+304    	; 0x11c0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1090:	aa e3       	ldi	r26, 0x3A	; 58
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	ea e3       	ldi	r30, 0x3A	; 58
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	48 2f       	mov	r20, r24
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	02 2e       	mov	r0, r18
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <GPIO_setupPinDirection+0xb4>
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	0a 94       	dec	r0
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <GPIO_setupPinDirection+0xb0>
    10b2:	80 95       	com	r24
    10b4:	84 23       	and	r24, r20
    10b6:	8c 93       	st	X, r24
    10b8:	83 c0       	rjmp	.+262    	; 0x11c0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	a1 f4       	brne	.+40     	; 0x10e8 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    10c0:	a7 e3       	ldi	r26, 0x37	; 55
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e7 e3       	ldi	r30, 0x37	; 55
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	48 2f       	mov	r20, r24
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 2e       	mov	r0, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <GPIO_setupPinDirection+0xe4>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	0a 94       	dec	r0
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <GPIO_setupPinDirection+0xe0>
    10e2:	84 2b       	or	r24, r20
    10e4:	8c 93       	st	X, r24
    10e6:	6c c0       	rjmp	.+216    	; 0x11c0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    10e8:	a7 e3       	ldi	r26, 0x37	; 55
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e7 e3       	ldi	r30, 0x37	; 55
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	48 2f       	mov	r20, r24
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <GPIO_setupPinDirection+0x10c>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <GPIO_setupPinDirection+0x108>
    110a:	80 95       	com	r24
    110c:	84 23       	and	r24, r20
    110e:	8c 93       	st	X, r24
    1110:	57 c0       	rjmp	.+174    	; 0x11c0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	81 30       	cpi	r24, 0x01	; 1
    1116:	a1 f4       	brne	.+40     	; 0x1140 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1118:	a4 e3       	ldi	r26, 0x34	; 52
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e4 e3       	ldi	r30, 0x34	; 52
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	48 2f       	mov	r20, r24
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	02 2e       	mov	r0, r18
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <GPIO_setupPinDirection+0x13c>
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	0a 94       	dec	r0
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <GPIO_setupPinDirection+0x138>
    113a:	84 2b       	or	r24, r20
    113c:	8c 93       	st	X, r24
    113e:	40 c0       	rjmp	.+128    	; 0x11c0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1140:	a4 e3       	ldi	r26, 0x34	; 52
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e4 e3       	ldi	r30, 0x34	; 52
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	48 2f       	mov	r20, r24
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	02 2e       	mov	r0, r18
    1158:	02 c0       	rjmp	.+4      	; 0x115e <GPIO_setupPinDirection+0x164>
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	0a 94       	dec	r0
    1160:	e2 f7       	brpl	.-8      	; 0x115a <GPIO_setupPinDirection+0x160>
    1162:	80 95       	com	r24
    1164:	84 23       	and	r24, r20
    1166:	8c 93       	st	X, r24
    1168:	2b c0       	rjmp	.+86     	; 0x11c0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	a1 f4       	brne	.+40     	; 0x1198 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1170:	a1 e3       	ldi	r26, 0x31	; 49
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e1 e3       	ldi	r30, 0x31	; 49
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	48 2f       	mov	r20, r24
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	02 2e       	mov	r0, r18
    1188:	02 c0       	rjmp	.+4      	; 0x118e <GPIO_setupPinDirection+0x194>
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	0a 94       	dec	r0
    1190:	e2 f7       	brpl	.-8      	; 0x118a <GPIO_setupPinDirection+0x190>
    1192:	84 2b       	or	r24, r20
    1194:	8c 93       	st	X, r24
    1196:	14 c0       	rjmp	.+40     	; 0x11c0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1198:	a1 e3       	ldi	r26, 0x31	; 49
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e1 e3       	ldi	r30, 0x31	; 49
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	48 2f       	mov	r20, r24
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	02 2e       	mov	r0, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <GPIO_setupPinDirection+0x1bc>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	0a 94       	dec	r0
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <GPIO_setupPinDirection+0x1b8>
    11ba:	80 95       	com	r24
    11bc:	84 23       	and	r24, r20
    11be:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <GPIO_writePin+0x6>
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <GPIO_writePin+0x8>
    11d8:	0f 92       	push	r0
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	89 83       	std	Y+1, r24	; 0x01
    11e0:	6a 83       	std	Y+2, r22	; 0x02
    11e2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	88 30       	cpi	r24, 0x08	; 8
    11e8:	08 f0       	brcs	.+2      	; 0x11ec <GPIO_writePin+0x1c>
    11ea:	d5 c0       	rjmp	.+426    	; 0x1396 <GPIO_writePin+0x1c6>
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	84 30       	cpi	r24, 0x04	; 4
    11f0:	08 f0       	brcs	.+2      	; 0x11f4 <GPIO_writePin+0x24>
    11f2:	d1 c0       	rjmp	.+418    	; 0x1396 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	3d 83       	std	Y+5, r19	; 0x05
    11fc:	2c 83       	std	Y+4, r18	; 0x04
    11fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1200:	9d 81       	ldd	r25, Y+5	; 0x05
    1202:	81 30       	cpi	r24, 0x01	; 1
    1204:	91 05       	cpc	r25, r1
    1206:	09 f4       	brne	.+2      	; 0x120a <GPIO_writePin+0x3a>
    1208:	43 c0       	rjmp	.+134    	; 0x1290 <GPIO_writePin+0xc0>
    120a:	2c 81       	ldd	r18, Y+4	; 0x04
    120c:	3d 81       	ldd	r19, Y+5	; 0x05
    120e:	22 30       	cpi	r18, 0x02	; 2
    1210:	31 05       	cpc	r19, r1
    1212:	2c f4       	brge	.+10     	; 0x121e <GPIO_writePin+0x4e>
    1214:	8c 81       	ldd	r24, Y+4	; 0x04
    1216:	9d 81       	ldd	r25, Y+5	; 0x05
    1218:	00 97       	sbiw	r24, 0x00	; 0
    121a:	71 f0       	breq	.+28     	; 0x1238 <GPIO_writePin+0x68>
    121c:	bc c0       	rjmp	.+376    	; 0x1396 <GPIO_writePin+0x1c6>
    121e:	2c 81       	ldd	r18, Y+4	; 0x04
    1220:	3d 81       	ldd	r19, Y+5	; 0x05
    1222:	22 30       	cpi	r18, 0x02	; 2
    1224:	31 05       	cpc	r19, r1
    1226:	09 f4       	brne	.+2      	; 0x122a <GPIO_writePin+0x5a>
    1228:	5f c0       	rjmp	.+190    	; 0x12e8 <GPIO_writePin+0x118>
    122a:	8c 81       	ldd	r24, Y+4	; 0x04
    122c:	9d 81       	ldd	r25, Y+5	; 0x05
    122e:	83 30       	cpi	r24, 0x03	; 3
    1230:	91 05       	cpc	r25, r1
    1232:	09 f4       	brne	.+2      	; 0x1236 <GPIO_writePin+0x66>
    1234:	85 c0       	rjmp	.+266    	; 0x1340 <GPIO_writePin+0x170>
    1236:	af c0       	rjmp	.+350    	; 0x1396 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	81 30       	cpi	r24, 0x01	; 1
    123c:	a1 f4       	brne	.+40     	; 0x1266 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    123e:	ab e3       	ldi	r26, 0x3B	; 59
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	eb e3       	ldi	r30, 0x3B	; 59
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	48 2f       	mov	r20, r24
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	02 2e       	mov	r0, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <GPIO_writePin+0x8c>
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	0a 94       	dec	r0
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <GPIO_writePin+0x88>
    1260:	84 2b       	or	r24, r20
    1262:	8c 93       	st	X, r24
    1264:	98 c0       	rjmp	.+304    	; 0x1396 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1266:	ab e3       	ldi	r26, 0x3B	; 59
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	eb e3       	ldi	r30, 0x3B	; 59
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	48 2f       	mov	r20, r24
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	02 2e       	mov	r0, r18
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <GPIO_writePin+0xb4>
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	0a 94       	dec	r0
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <GPIO_writePin+0xb0>
    1288:	80 95       	com	r24
    128a:	84 23       	and	r24, r20
    128c:	8c 93       	st	X, r24
    128e:	83 c0       	rjmp	.+262    	; 0x1396 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	81 30       	cpi	r24, 0x01	; 1
    1294:	a1 f4       	brne	.+40     	; 0x12be <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1296:	a8 e3       	ldi	r26, 0x38	; 56
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e8 e3       	ldi	r30, 0x38	; 56
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	48 2f       	mov	r20, r24
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	02 2e       	mov	r0, r18
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <GPIO_writePin+0xe4>
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	0a 94       	dec	r0
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <GPIO_writePin+0xe0>
    12b8:	84 2b       	or	r24, r20
    12ba:	8c 93       	st	X, r24
    12bc:	6c c0       	rjmp	.+216    	; 0x1396 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    12be:	a8 e3       	ldi	r26, 0x38	; 56
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	e8 e3       	ldi	r30, 0x38	; 56
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	48 2f       	mov	r20, r24
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	02 2e       	mov	r0, r18
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <GPIO_writePin+0x10c>
    12d8:	88 0f       	add	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	0a 94       	dec	r0
    12de:	e2 f7       	brpl	.-8      	; 0x12d8 <GPIO_writePin+0x108>
    12e0:	80 95       	com	r24
    12e2:	84 23       	and	r24, r20
    12e4:	8c 93       	st	X, r24
    12e6:	57 c0       	rjmp	.+174    	; 0x1396 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	81 30       	cpi	r24, 0x01	; 1
    12ec:	a1 f4       	brne	.+40     	; 0x1316 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    12ee:	a5 e3       	ldi	r26, 0x35	; 53
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	e5 e3       	ldi	r30, 0x35	; 53
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	48 2f       	mov	r20, r24
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	02 2e       	mov	r0, r18
    1306:	02 c0       	rjmp	.+4      	; 0x130c <GPIO_writePin+0x13c>
    1308:	88 0f       	add	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	0a 94       	dec	r0
    130e:	e2 f7       	brpl	.-8      	; 0x1308 <GPIO_writePin+0x138>
    1310:	84 2b       	or	r24, r20
    1312:	8c 93       	st	X, r24
    1314:	40 c0       	rjmp	.+128    	; 0x1396 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1316:	a5 e3       	ldi	r26, 0x35	; 53
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e5 e3       	ldi	r30, 0x35	; 53
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	48 2f       	mov	r20, r24
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	02 2e       	mov	r0, r18
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <GPIO_writePin+0x164>
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	0a 94       	dec	r0
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <GPIO_writePin+0x160>
    1338:	80 95       	com	r24
    133a:	84 23       	and	r24, r20
    133c:	8c 93       	st	X, r24
    133e:	2b c0       	rjmp	.+86     	; 0x1396 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	81 30       	cpi	r24, 0x01	; 1
    1344:	a1 f4       	brne	.+40     	; 0x136e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1346:	a2 e3       	ldi	r26, 0x32	; 50
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e2 e3       	ldi	r30, 0x32	; 50
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	48 2f       	mov	r20, r24
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	02 2e       	mov	r0, r18
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <GPIO_writePin+0x194>
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	0a 94       	dec	r0
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <GPIO_writePin+0x190>
    1368:	84 2b       	or	r24, r20
    136a:	8c 93       	st	X, r24
    136c:	14 c0       	rjmp	.+40     	; 0x1396 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    136e:	a2 e3       	ldi	r26, 0x32	; 50
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e2 e3       	ldi	r30, 0x32	; 50
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	48 2f       	mov	r20, r24
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	02 2e       	mov	r0, r18
    1386:	02 c0       	rjmp	.+4      	; 0x138c <GPIO_writePin+0x1bc>
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	0a 94       	dec	r0
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <GPIO_writePin+0x1b8>
    1390:	80 95       	com	r24
    1392:	84 23       	and	r24, r20
    1394:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <GPIO_readPin+0x6>
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <GPIO_readPin+0x8>
    13ae:	0f 92       	push	r0
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	8a 83       	std	Y+2, r24	; 0x02
    13b6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    13b8:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	88 30       	cpi	r24, 0x08	; 8
    13be:	08 f0       	brcs	.+2      	; 0x13c2 <GPIO_readPin+0x1c>
    13c0:	84 c0       	rjmp	.+264    	; 0x14ca <GPIO_readPin+0x124>
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	84 30       	cpi	r24, 0x04	; 4
    13c6:	08 f0       	brcs	.+2      	; 0x13ca <GPIO_readPin+0x24>
    13c8:	80 c0       	rjmp	.+256    	; 0x14ca <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	3d 83       	std	Y+5, r19	; 0x05
    13d2:	2c 83       	std	Y+4, r18	; 0x04
    13d4:	4c 81       	ldd	r20, Y+4	; 0x04
    13d6:	5d 81       	ldd	r21, Y+5	; 0x05
    13d8:	41 30       	cpi	r20, 0x01	; 1
    13da:	51 05       	cpc	r21, r1
    13dc:	79 f1       	breq	.+94     	; 0x143c <GPIO_readPin+0x96>
    13de:	8c 81       	ldd	r24, Y+4	; 0x04
    13e0:	9d 81       	ldd	r25, Y+5	; 0x05
    13e2:	82 30       	cpi	r24, 0x02	; 2
    13e4:	91 05       	cpc	r25, r1
    13e6:	34 f4       	brge	.+12     	; 0x13f4 <GPIO_readPin+0x4e>
    13e8:	2c 81       	ldd	r18, Y+4	; 0x04
    13ea:	3d 81       	ldd	r19, Y+5	; 0x05
    13ec:	21 15       	cp	r18, r1
    13ee:	31 05       	cpc	r19, r1
    13f0:	69 f0       	breq	.+26     	; 0x140c <GPIO_readPin+0x66>
    13f2:	6b c0       	rjmp	.+214    	; 0x14ca <GPIO_readPin+0x124>
    13f4:	4c 81       	ldd	r20, Y+4	; 0x04
    13f6:	5d 81       	ldd	r21, Y+5	; 0x05
    13f8:	42 30       	cpi	r20, 0x02	; 2
    13fa:	51 05       	cpc	r21, r1
    13fc:	b9 f1       	breq	.+110    	; 0x146c <GPIO_readPin+0xc6>
    13fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1400:	9d 81       	ldd	r25, Y+5	; 0x05
    1402:	83 30       	cpi	r24, 0x03	; 3
    1404:	91 05       	cpc	r25, r1
    1406:	09 f4       	brne	.+2      	; 0x140a <GPIO_readPin+0x64>
    1408:	49 c0       	rjmp	.+146    	; 0x149c <GPIO_readPin+0xf6>
    140a:	5f c0       	rjmp	.+190    	; 0x14ca <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    140c:	e9 e3       	ldi	r30, 0x39	; 57
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	88 2f       	mov	r24, r24
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	a9 01       	movw	r20, r18
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <GPIO_readPin+0x7e>
    1420:	55 95       	asr	r21
    1422:	47 95       	ror	r20
    1424:	8a 95       	dec	r24
    1426:	e2 f7       	brpl	.-8      	; 0x1420 <GPIO_readPin+0x7a>
    1428:	ca 01       	movw	r24, r20
    142a:	81 70       	andi	r24, 0x01	; 1
    142c:	90 70       	andi	r25, 0x00	; 0
    142e:	88 23       	and	r24, r24
    1430:	19 f0       	breq	.+6      	; 0x1438 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	89 83       	std	Y+1, r24	; 0x01
    1436:	49 c0       	rjmp	.+146    	; 0x14ca <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1438:	19 82       	std	Y+1, r1	; 0x01
    143a:	47 c0       	rjmp	.+142    	; 0x14ca <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    143c:	e6 e3       	ldi	r30, 0x36	; 54
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	88 2f       	mov	r24, r24
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	a9 01       	movw	r20, r18
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <GPIO_readPin+0xae>
    1450:	55 95       	asr	r21
    1452:	47 95       	ror	r20
    1454:	8a 95       	dec	r24
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <GPIO_readPin+0xaa>
    1458:	ca 01       	movw	r24, r20
    145a:	81 70       	andi	r24, 0x01	; 1
    145c:	90 70       	andi	r25, 0x00	; 0
    145e:	88 23       	and	r24, r24
    1460:	19 f0       	breq	.+6      	; 0x1468 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	89 83       	std	Y+1, r24	; 0x01
    1466:	31 c0       	rjmp	.+98     	; 0x14ca <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1468:	19 82       	std	Y+1, r1	; 0x01
    146a:	2f c0       	rjmp	.+94     	; 0x14ca <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    146c:	e3 e3       	ldi	r30, 0x33	; 51
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	88 2f       	mov	r24, r24
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	a9 01       	movw	r20, r18
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <GPIO_readPin+0xde>
    1480:	55 95       	asr	r21
    1482:	47 95       	ror	r20
    1484:	8a 95       	dec	r24
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <GPIO_readPin+0xda>
    1488:	ca 01       	movw	r24, r20
    148a:	81 70       	andi	r24, 0x01	; 1
    148c:	90 70       	andi	r25, 0x00	; 0
    148e:	88 23       	and	r24, r24
    1490:	19 f0       	breq	.+6      	; 0x1498 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	89 83       	std	Y+1, r24	; 0x01
    1496:	19 c0       	rjmp	.+50     	; 0x14ca <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1498:	19 82       	std	Y+1, r1	; 0x01
    149a:	17 c0       	rjmp	.+46     	; 0x14ca <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    149c:	e0 e3       	ldi	r30, 0x30	; 48
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	88 2f       	mov	r24, r24
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	a9 01       	movw	r20, r18
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <GPIO_readPin+0x10e>
    14b0:	55 95       	asr	r21
    14b2:	47 95       	ror	r20
    14b4:	8a 95       	dec	r24
    14b6:	e2 f7       	brpl	.-8      	; 0x14b0 <GPIO_readPin+0x10a>
    14b8:	ca 01       	movw	r24, r20
    14ba:	81 70       	andi	r24, 0x01	; 1
    14bc:	90 70       	andi	r25, 0x00	; 0
    14be:	88 23       	and	r24, r24
    14c0:	19 f0       	breq	.+6      	; 0x14c8 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	89 83       	std	Y+1, r24	; 0x01
    14c6:	01 c0       	rjmp	.+2      	; 0x14ca <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14c8:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	cf 91       	pop	r28
    14d8:	df 91       	pop	r29
    14da:	08 95       	ret

000014dc <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    14dc:	df 93       	push	r29
    14de:	cf 93       	push	r28
    14e0:	00 d0       	rcall	.+0      	; 0x14e2 <GPIO_setupPortDirection+0x6>
    14e2:	00 d0       	rcall	.+0      	; 0x14e4 <GPIO_setupPortDirection+0x8>
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	84 30       	cpi	r24, 0x04	; 4
    14f0:	90 f5       	brcc	.+100    	; 0x1556 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	3c 83       	std	Y+4, r19	; 0x04
    14fa:	2b 83       	std	Y+3, r18	; 0x03
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	91 05       	cpc	r25, r1
    1504:	d1 f0       	breq	.+52     	; 0x153a <GPIO_setupPortDirection+0x5e>
    1506:	2b 81       	ldd	r18, Y+3	; 0x03
    1508:	3c 81       	ldd	r19, Y+4	; 0x04
    150a:	22 30       	cpi	r18, 0x02	; 2
    150c:	31 05       	cpc	r19, r1
    150e:	2c f4       	brge	.+10     	; 0x151a <GPIO_setupPortDirection+0x3e>
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	9c 81       	ldd	r25, Y+4	; 0x04
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	61 f0       	breq	.+24     	; 0x1530 <GPIO_setupPortDirection+0x54>
    1518:	1e c0       	rjmp	.+60     	; 0x1556 <GPIO_setupPortDirection+0x7a>
    151a:	2b 81       	ldd	r18, Y+3	; 0x03
    151c:	3c 81       	ldd	r19, Y+4	; 0x04
    151e:	22 30       	cpi	r18, 0x02	; 2
    1520:	31 05       	cpc	r19, r1
    1522:	81 f0       	breq	.+32     	; 0x1544 <GPIO_setupPortDirection+0x68>
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	9c 81       	ldd	r25, Y+4	; 0x04
    1528:	83 30       	cpi	r24, 0x03	; 3
    152a:	91 05       	cpc	r25, r1
    152c:	81 f0       	breq	.+32     	; 0x154e <GPIO_setupPortDirection+0x72>
    152e:	13 c0       	rjmp	.+38     	; 0x1556 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1530:	ea e3       	ldi	r30, 0x3A	; 58
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	80 83       	st	Z, r24
    1538:	0e c0       	rjmp	.+28     	; 0x1556 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    153a:	e7 e3       	ldi	r30, 0x37	; 55
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	80 83       	st	Z, r24
    1542:	09 c0       	rjmp	.+18     	; 0x1556 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1544:	e4 e3       	ldi	r30, 0x34	; 52
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	80 83       	st	Z, r24
    154c:	04 c0       	rjmp	.+8      	; 0x1556 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    154e:	e1 e3       	ldi	r30, 0x31	; 49
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	80 83       	st	Z, r24
			break;
		}
	}
}
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	08 95       	ret

00001564 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	00 d0       	rcall	.+0      	; 0x156a <GPIO_writePort+0x6>
    156a:	00 d0       	rcall	.+0      	; 0x156c <GPIO_writePort+0x8>
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	89 83       	std	Y+1, r24	; 0x01
    1572:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	84 30       	cpi	r24, 0x04	; 4
    1578:	90 f5       	brcc	.+100    	; 0x15de <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	3c 83       	std	Y+4, r19	; 0x04
    1582:	2b 83       	std	Y+3, r18	; 0x03
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	9c 81       	ldd	r25, Y+4	; 0x04
    1588:	81 30       	cpi	r24, 0x01	; 1
    158a:	91 05       	cpc	r25, r1
    158c:	d1 f0       	breq	.+52     	; 0x15c2 <GPIO_writePort+0x5e>
    158e:	2b 81       	ldd	r18, Y+3	; 0x03
    1590:	3c 81       	ldd	r19, Y+4	; 0x04
    1592:	22 30       	cpi	r18, 0x02	; 2
    1594:	31 05       	cpc	r19, r1
    1596:	2c f4       	brge	.+10     	; 0x15a2 <GPIO_writePort+0x3e>
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	9c 81       	ldd	r25, Y+4	; 0x04
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	61 f0       	breq	.+24     	; 0x15b8 <GPIO_writePort+0x54>
    15a0:	1e c0       	rjmp	.+60     	; 0x15de <GPIO_writePort+0x7a>
    15a2:	2b 81       	ldd	r18, Y+3	; 0x03
    15a4:	3c 81       	ldd	r19, Y+4	; 0x04
    15a6:	22 30       	cpi	r18, 0x02	; 2
    15a8:	31 05       	cpc	r19, r1
    15aa:	81 f0       	breq	.+32     	; 0x15cc <GPIO_writePort+0x68>
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	9c 81       	ldd	r25, Y+4	; 0x04
    15b0:	83 30       	cpi	r24, 0x03	; 3
    15b2:	91 05       	cpc	r25, r1
    15b4:	81 f0       	breq	.+32     	; 0x15d6 <GPIO_writePort+0x72>
    15b6:	13 c0       	rjmp	.+38     	; 0x15de <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    15b8:	eb e3       	ldi	r30, 0x3B	; 59
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	80 83       	st	Z, r24
    15c0:	0e c0       	rjmp	.+28     	; 0x15de <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    15c2:	e8 e3       	ldi	r30, 0x38	; 56
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	80 83       	st	Z, r24
    15ca:	09 c0       	rjmp	.+18     	; 0x15de <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    15cc:	e5 e3       	ldi	r30, 0x35	; 53
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	80 83       	st	Z, r24
    15d4:	04 c0       	rjmp	.+8      	; 0x15de <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    15d6:	e2 e3       	ldi	r30, 0x32	; 50
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	80 83       	st	Z, r24
			break;
		}
	}
}
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	cf 91       	pop	r28
    15e8:	df 91       	pop	r29
    15ea:	08 95       	ret

000015ec <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    15ec:	df 93       	push	r29
    15ee:	cf 93       	push	r28
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <GPIO_readPort+0x6>
    15f2:	00 d0       	rcall	.+0      	; 0x15f4 <GPIO_readPort+0x8>
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
    15f8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    15fa:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	84 30       	cpi	r24, 0x04	; 4
    1600:	90 f5       	brcc	.+100    	; 0x1666 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	3c 83       	std	Y+4, r19	; 0x04
    160a:	2b 83       	std	Y+3, r18	; 0x03
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	9c 81       	ldd	r25, Y+4	; 0x04
    1610:	81 30       	cpi	r24, 0x01	; 1
    1612:	91 05       	cpc	r25, r1
    1614:	d1 f0       	breq	.+52     	; 0x164a <GPIO_readPort+0x5e>
    1616:	2b 81       	ldd	r18, Y+3	; 0x03
    1618:	3c 81       	ldd	r19, Y+4	; 0x04
    161a:	22 30       	cpi	r18, 0x02	; 2
    161c:	31 05       	cpc	r19, r1
    161e:	2c f4       	brge	.+10     	; 0x162a <GPIO_readPort+0x3e>
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	9c 81       	ldd	r25, Y+4	; 0x04
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	61 f0       	breq	.+24     	; 0x1640 <GPIO_readPort+0x54>
    1628:	1e c0       	rjmp	.+60     	; 0x1666 <GPIO_readPort+0x7a>
    162a:	2b 81       	ldd	r18, Y+3	; 0x03
    162c:	3c 81       	ldd	r19, Y+4	; 0x04
    162e:	22 30       	cpi	r18, 0x02	; 2
    1630:	31 05       	cpc	r19, r1
    1632:	81 f0       	breq	.+32     	; 0x1654 <GPIO_readPort+0x68>
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	9c 81       	ldd	r25, Y+4	; 0x04
    1638:	83 30       	cpi	r24, 0x03	; 3
    163a:	91 05       	cpc	r25, r1
    163c:	81 f0       	breq	.+32     	; 0x165e <GPIO_readPort+0x72>
    163e:	13 c0       	rjmp	.+38     	; 0x1666 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1640:	e9 e3       	ldi	r30, 0x39	; 57
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	89 83       	std	Y+1, r24	; 0x01
    1648:	0e c0       	rjmp	.+28     	; 0x1666 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    164a:	e6 e3       	ldi	r30, 0x36	; 54
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	09 c0       	rjmp	.+18     	; 0x1666 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1654:	e3 e3       	ldi	r30, 0x33	; 51
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	89 83       	std	Y+1, r24	; 0x01
    165c:	04 c0       	rjmp	.+8      	; 0x1666 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    165e:	e0 e3       	ldi	r30, 0x30	; 48
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1666:	89 81       	ldd	r24, Y+1	; 0x01
}
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	cf 91       	pop	r28
    1672:	df 91       	pop	r29
    1674:	08 95       	ret

00001676 <main>:
 * Author: Ahmed Reda
 *
 *******************************************************************************/
#include "mainfunctions.h"
int main (void)
{
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	a0 97       	sbiw	r28, 0x20	; 32
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	cd bf       	out	0x3d, r28	; 61
	uint8  alarm = 0;
    168a:	1a 82       	std	Y+2, r1	; 0x02
	uint8	pass[5] = {0};
    168c:	85 e0       	ldi	r24, 0x05	; 5
    168e:	fe 01       	movw	r30, r28
    1690:	33 96       	adiw	r30, 0x03	; 3
    1692:	df 01       	movw	r26, r30
    1694:	98 2f       	mov	r25, r24
    1696:	1d 92       	st	X+, r1
    1698:	9a 95       	dec	r25
    169a:	e9 f7       	brne	.-6      	; 0x1696 <main+0x20>
	uint8   pass2[5] = {0};
    169c:	85 e0       	ldi	r24, 0x05	; 5
    169e:	fe 01       	movw	r30, r28
    16a0:	38 96       	adiw	r30, 0x08	; 8
    16a2:	df 01       	movw	r26, r30
    16a4:	98 2f       	mov	r25, r24
    16a6:	1d 92       	st	X+, r1
    16a8:	9a 95       	dec	r25
    16aa:	e9 f7       	brne	.-6      	; 0x16a6 <main+0x30>
	uint8 state = 0x00;
    16ac:	19 82       	std	Y+1, r1	; 0x01
	SREG|=(1<<7);
    16ae:	af e5       	ldi	r26, 0x5F	; 95
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	ef e5       	ldi	r30, 0x5F	; 95
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	80 68       	ori	r24, 0x80	; 128
    16ba:	8c 93       	st	X, r24
	UART_ConfigType uart_config = {eight_data,disabled,one_stop,9600};
    16bc:	de 01       	movw	r26, r28
    16be:	1d 96       	adiw	r26, 0x0d	; 13
    16c0:	b8 8f       	std	Y+24, r27	; 0x18
    16c2:	af 8b       	std	Y+23, r26	; 0x17
    16c4:	eb e6       	ldi	r30, 0x6B	; 107
    16c6:	f1 e0       	ldi	r31, 0x01	; 1
    16c8:	fa 8f       	std	Y+26, r31	; 0x1a
    16ca:	e9 8f       	std	Y+25, r30	; 0x19
    16cc:	f7 e0       	ldi	r31, 0x07	; 7
    16ce:	fb 8f       	std	Y+27, r31	; 0x1b
    16d0:	a9 8d       	ldd	r26, Y+25	; 0x19
    16d2:	ba 8d       	ldd	r27, Y+26	; 0x1a
    16d4:	0c 90       	ld	r0, X
    16d6:	e9 8d       	ldd	r30, Y+25	; 0x19
    16d8:	fa 8d       	ldd	r31, Y+26	; 0x1a
    16da:	31 96       	adiw	r30, 0x01	; 1
    16dc:	fa 8f       	std	Y+26, r31	; 0x1a
    16de:	e9 8f       	std	Y+25, r30	; 0x19
    16e0:	af 89       	ldd	r26, Y+23	; 0x17
    16e2:	b8 8d       	ldd	r27, Y+24	; 0x18
    16e4:	0c 92       	st	X, r0
    16e6:	ef 89       	ldd	r30, Y+23	; 0x17
    16e8:	f8 8d       	ldd	r31, Y+24	; 0x18
    16ea:	31 96       	adiw	r30, 0x01	; 1
    16ec:	f8 8f       	std	Y+24, r31	; 0x18
    16ee:	ef 8b       	std	Y+23, r30	; 0x17
    16f0:	fb 8d       	ldd	r31, Y+27	; 0x1b
    16f2:	f1 50       	subi	r31, 0x01	; 1
    16f4:	fb 8f       	std	Y+27, r31	; 0x1b
    16f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16f8:	88 23       	and	r24, r24
    16fa:	51 f7       	brne	.-44     	; 0x16d0 <main+0x5a>
	TWI_ConfigType   twi_config = {0b00000010,0x0002};
    16fc:	de 01       	movw	r26, r28
    16fe:	54 96       	adiw	r26, 0x14	; 20
    1700:	bd 8f       	std	Y+29, r27	; 0x1d
    1702:	ac 8f       	std	Y+28, r26	; 0x1c
    1704:	e8 e6       	ldi	r30, 0x68	; 104
    1706:	f1 e0       	ldi	r31, 0x01	; 1
    1708:	ff 8f       	std	Y+31, r31	; 0x1f
    170a:	ee 8f       	std	Y+30, r30	; 0x1e
    170c:	f3 e0       	ldi	r31, 0x03	; 3
    170e:	f8 a3       	std	Y+32, r31	; 0x20
    1710:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1712:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1714:	0c 90       	ld	r0, X
    1716:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1718:	ff 8d       	ldd	r31, Y+31	; 0x1f
    171a:	31 96       	adiw	r30, 0x01	; 1
    171c:	ff 8f       	std	Y+31, r31	; 0x1f
    171e:	ee 8f       	std	Y+30, r30	; 0x1e
    1720:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1722:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1724:	0c 92       	st	X, r0
    1726:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1728:	fd 8d       	ldd	r31, Y+29	; 0x1d
    172a:	31 96       	adiw	r30, 0x01	; 1
    172c:	fd 8f       	std	Y+29, r31	; 0x1d
    172e:	ec 8f       	std	Y+28, r30	; 0x1c
    1730:	f8 a1       	ldd	r31, Y+32	; 0x20
    1732:	f1 50       	subi	r31, 0x01	; 1
    1734:	f8 a3       	std	Y+32, r31	; 0x20
    1736:	88 a1       	ldd	r24, Y+32	; 0x20
    1738:	88 23       	and	r24, r24
    173a:	51 f7       	brne	.-44     	; 0x1710 <main+0x9a>
	DcMotor_Init();
    173c:	0e 94 9c 06 	call	0xd38	; 0xd38 <DcMotor_Init>
	TWI_init(&twi_config);
    1740:	ce 01       	movw	r24, r28
    1742:	44 96       	adiw	r24, 0x14	; 20
    1744:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <TWI_init>
	UART_init(&uart_config);
    1748:	ce 01       	movw	r24, r28
    174a:	0d 96       	adiw	r24, 0x0d	; 13
    174c:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <UART_init>
	while (1)
	{
		label1:		Pass_from_MC1 (pass);
    1750:	ce 01       	movw	r24, r28
    1752:	03 96       	adiw	r24, 0x03	; 3
    1754:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Pass_from_MC1>
		Pass_from_MC1 (pass2);
    1758:	ce 01       	movw	r24, r28
    175a:	08 96       	adiw	r24, 0x08	; 8
    175c:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Pass_from_MC1>
		if ((array_check (pass,pass2 )) == 1)
    1760:	ce 01       	movw	r24, r28
    1762:	03 96       	adiw	r24, 0x03	; 3
    1764:	9e 01       	movw	r18, r28
    1766:	28 5f       	subi	r18, 0xF8	; 248
    1768:	3f 4f       	sbci	r19, 0xFF	; 255
    176a:	b9 01       	movw	r22, r18
    176c:	0e 94 39 0c 	call	0x1872	; 0x1872 <array_check>
    1770:	81 30       	cpi	r24, 0x01	; 1
    1772:	09 f0       	breq	.+2      	; 0x1776 <main+0x100>
    1774:	6f c0       	rjmp	.+222    	; 0x1854 <main+0x1de>
		{
			send_status (success);
    1776:	80 e4       	ldi	r24, 0x40	; 64
    1778:	0e 94 bc 0c 	call	0x1978	; 0x1978 <send_status>
			save_EEPROM (pass);
    177c:	ce 01       	movw	r24, r28
    177e:	03 96       	adiw	r24, 0x03	; 3
    1780:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <save_EEPROM>
			label2:		state = recieve_status();
    1784:	0e 94 cd 0c 	call	0x199a	; 0x199a <recieve_status>
    1788:	89 83       	std	Y+1, r24	; 0x01
			if (state == motor)
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	80 32       	cpi	r24, 0x20	; 32
    178e:	81 f5       	brne	.+96     	; 0x17f0 <main+0x17a>
			{
				label3:			Pass_from_MC1 (pass);
    1790:	ce 01       	movw	r24, r28
    1792:	03 96       	adiw	r24, 0x03	; 3
    1794:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Pass_from_MC1>
				load_EEPROM (pass2);
    1798:	ce 01       	movw	r24, r28
    179a:	08 96       	adiw	r24, 0x08	; 8
    179c:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <load_EEPROM>
				if ((array_check (pass,pass2 )) == 1)
    17a0:	ce 01       	movw	r24, r28
    17a2:	03 96       	adiw	r24, 0x03	; 3
    17a4:	9e 01       	movw	r18, r28
    17a6:	28 5f       	subi	r18, 0xF8	; 248
    17a8:	3f 4f       	sbci	r19, 0xFF	; 255
    17aa:	b9 01       	movw	r22, r18
    17ac:	0e 94 39 0c 	call	0x1872	; 0x1872 <array_check>
    17b0:	81 30       	cpi	r24, 0x01	; 1
    17b2:	31 f4       	brne	.+12     	; 0x17c0 <main+0x14a>
				{
					Open_door();
    17b4:	0e 94 de 0c 	call	0x19bc	; 0x19bc <Open_door>
					send_status (done);
    17b8:	85 e1       	ldi	r24, 0x15	; 21
    17ba:	0e 94 bc 0c 	call	0x1978	; 0x1978 <send_status>
    17be:	e2 cf       	rjmp	.-60     	; 0x1784 <main+0x10e>
					goto label2;
				}
				else if ((array_check (pass,pass2 )) == 0)
    17c0:	ce 01       	movw	r24, r28
    17c2:	03 96       	adiw	r24, 0x03	; 3
    17c4:	9e 01       	movw	r18, r28
    17c6:	28 5f       	subi	r18, 0xF8	; 248
    17c8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ca:	b9 01       	movw	r22, r18
    17cc:	0e 94 39 0c 	call	0x1872	; 0x1872 <array_check>
    17d0:	88 23       	and	r24, r24
    17d2:	09 f0       	breq	.+2      	; 0x17d6 <main+0x160>
    17d4:	bd cf       	rjmp	.-134    	; 0x1750 <main+0xda>
				{
					send_status (fail);
    17d6:	81 e4       	ldi	r24, 0x41	; 65
    17d8:	0e 94 bc 0c 	call	0x1978	; 0x1978 <send_status>
					alarm ++;
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	8f 5f       	subi	r24, 0xFF	; 255
    17e0:	8a 83       	std	Y+2, r24	; 0x02
					if (alarm < 3)
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	83 30       	cpi	r24, 0x03	; 3
    17e6:	a0 f2       	brcs	.-88     	; 0x1790 <main+0x11a>
					{
						goto label3;
					}
					else
					{
						Buzzer();
    17e8:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <Buzzer>
						alarm = 0;
    17ec:	1a 82       	std	Y+2, r1	; 0x02
    17ee:	ca cf       	rjmp	.-108    	; 0x1784 <main+0x10e>
						goto label2;
					}
				}

			}
			else if (state == chgpass)
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	81 32       	cpi	r24, 0x21	; 33
    17f4:	09 f0       	breq	.+2      	; 0x17f8 <main+0x182>
    17f6:	ac cf       	rjmp	.-168    	; 0x1750 <main+0xda>
			{
label4:			Pass_from_MC1 (pass);
    17f8:	ce 01       	movw	r24, r28
    17fa:	03 96       	adiw	r24, 0x03	; 3
    17fc:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Pass_from_MC1>
				load_EEPROM (pass2);
    1800:	ce 01       	movw	r24, r28
    1802:	08 96       	adiw	r24, 0x08	; 8
    1804:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <load_EEPROM>
				if ((array_check (pass,pass2 )) == 1)
    1808:	ce 01       	movw	r24, r28
    180a:	03 96       	adiw	r24, 0x03	; 3
    180c:	9e 01       	movw	r18, r28
    180e:	28 5f       	subi	r18, 0xF8	; 248
    1810:	3f 4f       	sbci	r19, 0xFF	; 255
    1812:	b9 01       	movw	r22, r18
    1814:	0e 94 39 0c 	call	0x1872	; 0x1872 <array_check>
    1818:	81 30       	cpi	r24, 0x01	; 1
    181a:	21 f4       	brne	.+8      	; 0x1824 <main+0x1ae>
				{
					send_status (success);
    181c:	80 e4       	ldi	r24, 0x40	; 64
    181e:	0e 94 bc 0c 	call	0x1978	; 0x1978 <send_status>
    1822:	96 cf       	rjmp	.-212    	; 0x1750 <main+0xda>
					goto label1;
				}
				else if ((array_check (pass,pass2 )) == 0)
    1824:	ce 01       	movw	r24, r28
    1826:	03 96       	adiw	r24, 0x03	; 3
    1828:	9e 01       	movw	r18, r28
    182a:	28 5f       	subi	r18, 0xF8	; 248
    182c:	3f 4f       	sbci	r19, 0xFF	; 255
    182e:	b9 01       	movw	r22, r18
    1830:	0e 94 39 0c 	call	0x1872	; 0x1872 <array_check>
    1834:	88 23       	and	r24, r24
    1836:	09 f0       	breq	.+2      	; 0x183a <main+0x1c4>
    1838:	8b cf       	rjmp	.-234    	; 0x1750 <main+0xda>
				{
					send_status (fail);
    183a:	81 e4       	ldi	r24, 0x41	; 65
    183c:	0e 94 bc 0c 	call	0x1978	; 0x1978 <send_status>
					alarm ++;
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	8f 5f       	subi	r24, 0xFF	; 255
    1844:	8a 83       	std	Y+2, r24	; 0x02
					if (alarm < 3)
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	83 30       	cpi	r24, 0x03	; 3
    184a:	b0 f2       	brcs	.-84     	; 0x17f8 <main+0x182>
					{
						goto label4;
					}
					else
					{
						Buzzer();
    184c:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <Buzzer>
						alarm = 0;
    1850:	1a 82       	std	Y+2, r1	; 0x02
    1852:	98 cf       	rjmp	.-208    	; 0x1784 <main+0x10e>
					}
				}
			}

		}
		else if ((array_check (pass,pass2 )) == 0)
    1854:	ce 01       	movw	r24, r28
    1856:	03 96       	adiw	r24, 0x03	; 3
    1858:	9e 01       	movw	r18, r28
    185a:	28 5f       	subi	r18, 0xF8	; 248
    185c:	3f 4f       	sbci	r19, 0xFF	; 255
    185e:	b9 01       	movw	r22, r18
    1860:	0e 94 39 0c 	call	0x1872	; 0x1872 <array_check>
    1864:	88 23       	and	r24, r24
    1866:	09 f0       	breq	.+2      	; 0x186a <main+0x1f4>
    1868:	73 cf       	rjmp	.-282    	; 0x1750 <main+0xda>
		{
			send_status (fail);
    186a:	81 e4       	ldi	r24, 0x41	; 65
    186c:	0e 94 bc 0c 	call	0x1978	; 0x1978 <send_status>
    1870:	6f cf       	rjmp	.-290    	; 0x1750 <main+0xda>

00001872 <array_check>:
 *******************************************************************************/
#include "mainfunctions.h"
static volatile uint8 g_sec = 0;

uint8 array_check (uint8 * arr1, uint8 * arr2)
{
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	00 d0       	rcall	.+0      	; 0x1878 <array_check+0x6>
    1878:	00 d0       	rcall	.+0      	; 0x187a <array_check+0x8>
    187a:	00 d0       	rcall	.+0      	; 0x187c <array_check+0xa>
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
    1880:	9b 83       	std	Y+3, r25	; 0x03
    1882:	8a 83       	std	Y+2, r24	; 0x02
    1884:	7d 83       	std	Y+5, r23	; 0x05
    1886:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	for (i=0;i<=4;i++)
    1888:	19 82       	std	Y+1, r1	; 0x01
    188a:	19 c0       	rjmp	.+50     	; 0x18be <array_check+0x4c>
	{
		if (arr1[i]!=arr2[i])
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	9b 81       	ldd	r25, Y+3	; 0x03
    1896:	fc 01       	movw	r30, r24
    1898:	e2 0f       	add	r30, r18
    189a:	f3 1f       	adc	r31, r19
    189c:	40 81       	ld	r20, Z
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	8c 81       	ldd	r24, Y+4	; 0x04
    18a6:	9d 81       	ldd	r25, Y+5	; 0x05
    18a8:	fc 01       	movw	r30, r24
    18aa:	e2 0f       	add	r30, r18
    18ac:	f3 1f       	adc	r31, r19
    18ae:	80 81       	ld	r24, Z
    18b0:	48 17       	cp	r20, r24
    18b2:	11 f0       	breq	.+4      	; 0x18b8 <array_check+0x46>
		{
			return 0;
    18b4:	1e 82       	std	Y+6, r1	; 0x06
    18b6:	08 c0       	rjmp	.+16     	; 0x18c8 <array_check+0x56>
static volatile uint8 g_sec = 0;

uint8 array_check (uint8 * arr1, uint8 * arr2)
{
	uint8 i;
	for (i=0;i<=4;i++)
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	8f 5f       	subi	r24, 0xFF	; 255
    18bc:	89 83       	std	Y+1, r24	; 0x01
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	85 30       	cpi	r24, 0x05	; 5
    18c2:	20 f3       	brcs	.-56     	; 0x188c <array_check+0x1a>
		if (arr1[i]!=arr2[i])
		{
			return 0;
		}
	}
	return 1;
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	8e 83       	std	Y+6, r24	; 0x06
    18c8:	8e 81       	ldd	r24, Y+6	; 0x06
}
    18ca:	26 96       	adiw	r28, 0x06	; 6
    18cc:	0f b6       	in	r0, 0x3f	; 63
    18ce:	f8 94       	cli
    18d0:	de bf       	out	0x3e, r29	; 62
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	cd bf       	out	0x3d, r28	; 61
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <Pass_from_MC1>:

void Pass_from_MC1 (uint8 * pass)
{
    18dc:	0f 93       	push	r16
    18de:	1f 93       	push	r17
    18e0:	df 93       	push	r29
    18e2:	cf 93       	push	r28
    18e4:	00 d0       	rcall	.+0      	; 0x18e6 <Pass_from_MC1+0xa>
    18e6:	0f 92       	push	r0
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	9b 83       	std	Y+3, r25	; 0x03
    18ee:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	UART_sendByte(MC2_READY);
    18f0:	80 e1       	ldi	r24, 0x10	; 16
    18f2:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <UART_sendByte>
	for (i=0;i<=4;i++)
    18f6:	19 82       	std	Y+1, r1	; 0x01
    18f8:	0f c0       	rjmp	.+30     	; 0x1918 <Pass_from_MC1+0x3c>
	{
		pass[i]= UART_recieveByte();
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	28 2f       	mov	r18, r24
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	9b 81       	ldd	r25, Y+3	; 0x03
    1904:	8c 01       	movw	r16, r24
    1906:	02 0f       	add	r16, r18
    1908:	13 1f       	adc	r17, r19
    190a:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <UART_recieveByte>
    190e:	f8 01       	movw	r30, r16
    1910:	80 83       	st	Z, r24

void Pass_from_MC1 (uint8 * pass)
{
	uint8 i;
	UART_sendByte(MC2_READY);
	for (i=0;i<=4;i++)
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	8f 5f       	subi	r24, 0xFF	; 255
    1916:	89 83       	std	Y+1, r24	; 0x01
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	85 30       	cpi	r24, 0x05	; 5
    191c:	70 f3       	brcs	.-36     	; 0x18fa <Pass_from_MC1+0x1e>
	{
		pass[i]= UART_recieveByte();
	}
}
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	cf 91       	pop	r28
    1926:	df 91       	pop	r29
    1928:	1f 91       	pop	r17
    192a:	0f 91       	pop	r16
    192c:	08 95       	ret

0000192e <Pass_to_MC1>:
void Pass_to_MC1(uint8 * pass)
{
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	00 d0       	rcall	.+0      	; 0x1934 <Pass_to_MC1+0x6>
    1934:	0f 92       	push	r0
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	9b 83       	std	Y+3, r25	; 0x03
    193c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	while(UART_recieveByte() != MC1_READY){}
    193e:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <UART_recieveByte>
    1942:	81 31       	cpi	r24, 0x11	; 17
    1944:	e1 f7       	brne	.-8      	; 0x193e <Pass_to_MC1+0x10>
	for (i=0;i<=4;i++)
    1946:	19 82       	std	Y+1, r1	; 0x01
    1948:	0e c0       	rjmp	.+28     	; 0x1966 <Pass_to_MC1+0x38>
	{
		UART_sendByte(pass[i]);
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	9b 81       	ldd	r25, Y+3	; 0x03
    1954:	fc 01       	movw	r30, r24
    1956:	e2 0f       	add	r30, r18
    1958:	f3 1f       	adc	r31, r19
    195a:	80 81       	ld	r24, Z
    195c:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <UART_sendByte>
}
void Pass_to_MC1(uint8 * pass)
{
	uint8 i;
	while(UART_recieveByte() != MC1_READY){}
	for (i=0;i<=4;i++)
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	8f 5f       	subi	r24, 0xFF	; 255
    1964:	89 83       	std	Y+1, r24	; 0x01
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	85 30       	cpi	r24, 0x05	; 5
    196a:	78 f3       	brcs	.-34     	; 0x194a <Pass_to_MC1+0x1c>
	{
		UART_sendByte(pass[i]);
	}

}
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	08 95       	ret

00001978 <send_status>:
void send_status (uint8 state)
{
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	0f 92       	push	r0
    197e:	cd b7       	in	r28, 0x3d	; 61
    1980:	de b7       	in	r29, 0x3e	; 62
    1982:	89 83       	std	Y+1, r24	; 0x01
	while(UART_recieveByte() != MC1_READY){}
    1984:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <UART_recieveByte>
    1988:	81 31       	cpi	r24, 0x11	; 17
    198a:	e1 f7       	brne	.-8      	; 0x1984 <send_status+0xc>
	UART_sendByte(state);
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <UART_sendByte>
}
    1992:	0f 90       	pop	r0
    1994:	cf 91       	pop	r28
    1996:	df 91       	pop	r29
    1998:	08 95       	ret

0000199a <recieve_status>:

 uint8 recieve_status (void)
{
    199a:	df 93       	push	r29
    199c:	cf 93       	push	r28
    199e:	0f 92       	push	r0
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
	uint8 state = 0;
    19a4:	19 82       	std	Y+1, r1	; 0x01
	UART_sendByte(MC2_READY);
    19a6:	80 e1       	ldi	r24, 0x10	; 16
    19a8:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <UART_sendByte>
	state= UART_recieveByte();
    19ac:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <UART_recieveByte>
    19b0:	89 83       	std	Y+1, r24	; 0x01
	return state;
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    19b4:	0f 90       	pop	r0
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <Open_door>:

void Open_door (void)
{
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62

	DcMotor_Rotate (CW,100);
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	64 e6       	ldi	r22, 0x64	; 100
    19c8:	0e 94 b7 06 	call	0xd6e	; 0xd6e <DcMotor_Rotate>
	send_status(unlock);
    19cc:	87 e1       	ldi	r24, 0x17	; 23
    19ce:	0e 94 bc 0c 	call	0x1978	; 0x1978 <send_status>
	delaySeconds(15);
    19d2:	8f e0       	ldi	r24, 0x0F	; 15
    19d4:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <delaySeconds>
	DcMotor_Rotate (STOP,0);
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	60 e0       	ldi	r22, 0x00	; 0
    19dc:	0e 94 b7 06 	call	0xd6e	; 0xd6e <DcMotor_Rotate>
	delaySeconds(3);
    19e0:	83 e0       	ldi	r24, 0x03	; 3
    19e2:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <delaySeconds>
	send_status(lock);
    19e6:	86 e1       	ldi	r24, 0x16	; 22
    19e8:	0e 94 bc 0c 	call	0x1978	; 0x1978 <send_status>
	DcMotor_Rotate (ACW,100);
    19ec:	82 e0       	ldi	r24, 0x02	; 2
    19ee:	64 e6       	ldi	r22, 0x64	; 100
    19f0:	0e 94 b7 06 	call	0xd6e	; 0xd6e <DcMotor_Rotate>
	delaySeconds(15);
    19f4:	8f e0       	ldi	r24, 0x0F	; 15
    19f6:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <delaySeconds>
	DcMotor_Rotate (STOP,0);
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	60 e0       	ldi	r22, 0x00	; 0
    19fe:	0e 94 b7 06 	call	0xd6e	; 0xd6e <DcMotor_Rotate>
}
    1a02:	cf 91       	pop	r28
    1a04:	df 91       	pop	r29
    1a06:	08 95       	ret

00001a08 <save_EEPROM>:



void save_EEPROM (uint8 * pass)
{
    1a08:	df 93       	push	r29
    1a0a:	cf 93       	push	r28
    1a0c:	00 d0       	rcall	.+0      	; 0x1a0e <save_EEPROM+0x6>
    1a0e:	0f 92       	push	r0
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	9b 83       	std	Y+3, r25	; 0x03
    1a16:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
		for (i=0;i<=4;i++)
    1a18:	19 82       	std	Y+1, r1	; 0x01
    1a1a:	16 c0       	rjmp	.+44     	; 0x1a48 <save_EEPROM+0x40>
		{
			EEPROM_writeByte(0x0311+i,pass[i]);
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
    1a1e:	88 2f       	mov	r24, r24
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	8f 5e       	subi	r24, 0xEF	; 239
    1a24:	9c 4f       	sbci	r25, 0xFC	; 252
    1a26:	ac 01       	movw	r20, r24
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	9b 81       	ldd	r25, Y+3	; 0x03
    1a32:	fc 01       	movw	r30, r24
    1a34:	e2 0f       	add	r30, r18
    1a36:	f3 1f       	adc	r31, r19
    1a38:	20 81       	ld	r18, Z
    1a3a:	ca 01       	movw	r24, r20
    1a3c:	62 2f       	mov	r22, r18
    1a3e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <EEPROM_writeByte>


void save_EEPROM (uint8 * pass)
{
	uint8 i;
		for (i=0;i<=4;i++)
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	8f 5f       	subi	r24, 0xFF	; 255
    1a46:	89 83       	std	Y+1, r24	; 0x01
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	85 30       	cpi	r24, 0x05	; 5
    1a4c:	38 f3       	brcs	.-50     	; 0x1a1c <save_EEPROM+0x14>
		{
			EEPROM_writeByte(0x0311+i,pass[i]);
		}


}
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	08 95       	ret

00001a5a <load_EEPROM>:


void load_EEPROM (uint8 * pass)
{
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	00 d0       	rcall	.+0      	; 0x1a60 <load_EEPROM+0x6>
    1a60:	0f 92       	push	r0
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	9b 83       	std	Y+3, r25	; 0x03
    1a68:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for (i=0;i<=4;i++)
    1a6a:	19 82       	std	Y+1, r1	; 0x01
    1a6c:	14 c0       	rjmp	.+40     	; 0x1a96 <load_EEPROM+0x3c>
	{
		EEPROM_readByte(0x0311+i,&pass[i]);
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	88 2f       	mov	r24, r24
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	8f 5e       	subi	r24, 0xEF	; 239
    1a76:	9c 4f       	sbci	r25, 0xFC	; 252
    1a78:	ac 01       	movw	r20, r24
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	9b 81       	ldd	r25, Y+3	; 0x03
    1a84:	28 0f       	add	r18, r24
    1a86:	39 1f       	adc	r19, r25
    1a88:	ca 01       	movw	r24, r20
    1a8a:	b9 01       	movw	r22, r18
    1a8c:	0e 94 9d 07 	call	0xf3a	; 0xf3a <EEPROM_readByte>


void load_EEPROM (uint8 * pass)
{
	uint8 i;
	for (i=0;i<=4;i++)
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	8f 5f       	subi	r24, 0xFF	; 255
    1a94:	89 83       	std	Y+1, r24	; 0x01
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	85 30       	cpi	r24, 0x05	; 5
    1a9a:	48 f3       	brcs	.-46     	; 0x1a6e <load_EEPROM+0x14>
	{
		EEPROM_readByte(0x0311+i,&pass[i]);
	}
}
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	08 95       	ret

00001aa8 <countSec>:
void countSec(void)
{
    1aa8:	df 93       	push	r29
    1aaa:	cf 93       	push	r28
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
	g_sec++;
    1ab0:	80 91 78 01 	lds	r24, 0x0178
    1ab4:	8f 5f       	subi	r24, 0xFF	; 255
    1ab6:	80 93 78 01 	sts	0x0178, r24
}
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	08 95       	ret

00001ac0 <delaySeconds>:
void delaySeconds(uint8 sec)
{
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	2c 97       	sbiw	r28, 0x0c	; 12
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	f8 94       	cli
    1ace:	de bf       	out	0x3e, r29	; 62
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	cd bf       	out	0x3d, r28	; 61
    1ad4:	8f 83       	std	Y+7, r24	; 0x07
	/* setting the callBack function to count seconds */
	Timer1_setCallBack(countSec);
    1ad6:	84 e5       	ldi	r24, 0x54	; 84
    1ad8:	9d e0       	ldi	r25, 0x0D	; 13
    1ada:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <Timer1_setCallBack>
	/* timer1 configurations to count sec per interrupt */
	Timer1_ConfigType timer1_config = {0,468748,F_CPU_1024,compare};
    1ade:	ce 01       	movw	r24, r28
    1ae0:	01 96       	adiw	r24, 0x01	; 1
    1ae2:	99 87       	std	Y+9, r25	; 0x09
    1ae4:	88 87       	std	Y+8, r24	; 0x08
    1ae6:	e2 e7       	ldi	r30, 0x72	; 114
    1ae8:	f1 e0       	ldi	r31, 0x01	; 1
    1aea:	fb 87       	std	Y+11, r31	; 0x0b
    1aec:	ea 87       	std	Y+10, r30	; 0x0a
    1aee:	f6 e0       	ldi	r31, 0x06	; 6
    1af0:	fc 87       	std	Y+12, r31	; 0x0c
    1af2:	ea 85       	ldd	r30, Y+10	; 0x0a
    1af4:	fb 85       	ldd	r31, Y+11	; 0x0b
    1af6:	00 80       	ld	r0, Z
    1af8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1afa:	9b 85       	ldd	r25, Y+11	; 0x0b
    1afc:	01 96       	adiw	r24, 0x01	; 1
    1afe:	9b 87       	std	Y+11, r25	; 0x0b
    1b00:	8a 87       	std	Y+10, r24	; 0x0a
    1b02:	e8 85       	ldd	r30, Y+8	; 0x08
    1b04:	f9 85       	ldd	r31, Y+9	; 0x09
    1b06:	00 82       	st	Z, r0
    1b08:	88 85       	ldd	r24, Y+8	; 0x08
    1b0a:	99 85       	ldd	r25, Y+9	; 0x09
    1b0c:	01 96       	adiw	r24, 0x01	; 1
    1b0e:	99 87       	std	Y+9, r25	; 0x09
    1b10:	88 87       	std	Y+8, r24	; 0x08
    1b12:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b14:	91 50       	subi	r25, 0x01	; 1
    1b16:	9c 87       	std	Y+12, r25	; 0x0c
    1b18:	ec 85       	ldd	r30, Y+12	; 0x0c
    1b1a:	ee 23       	and	r30, r30
    1b1c:	51 f7       	brne	.-44     	; 0x1af2 <delaySeconds+0x32>
	Timer1_init(&timer1_config);
    1b1e:	ce 01       	movw	r24, r28
    1b20:	01 96       	adiw	r24, 0x01	; 1
    1b22:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <Timer1_init>
	while(g_sec < sec);
    1b26:	90 91 78 01 	lds	r25, 0x0178
    1b2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b2c:	98 17       	cp	r25, r24
    1b2e:	d8 f3       	brcs	.-10     	; 0x1b26 <delaySeconds+0x66>
	g_sec = 0;
    1b30:	10 92 78 01 	sts	0x0178, r1
	Timer1_deInit();
    1b34:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <Timer1_deInit>

}
    1b38:	2c 96       	adiw	r28, 0x0c	; 12
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	f8 94       	cli
    1b3e:	de bf       	out	0x3e, r29	; 62
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	cd bf       	out	0x3d, r28	; 61
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <Buzzer>:


void Buzzer (void)
{
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
	Buzzer_on();
    1b52:	0e 94 44 07 	call	0xe88	; 0xe88 <Buzzer_on>
	delaySeconds(60);
    1b56:	8c e3       	ldi	r24, 0x3C	; 60
    1b58:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <delaySeconds>
	Buzzer_off();
    1b5c:	0e 94 50 07 	call	0xea0	; 0xea0 <Buzzer_off>

}
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	08 95       	ret

00001b66 <__vector_9>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "timer1.h"
static volatile void(*g_callback_timer1ptr)(void) = NULL_PTR;
ISR(TIMER1_OVF_vect)
{
    1b66:	1f 92       	push	r1
    1b68:	0f 92       	push	r0
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	0f 92       	push	r0
    1b6e:	11 24       	eor	r1, r1
    1b70:	2f 93       	push	r18
    1b72:	3f 93       	push	r19
    1b74:	4f 93       	push	r20
    1b76:	5f 93       	push	r21
    1b78:	6f 93       	push	r22
    1b7a:	7f 93       	push	r23
    1b7c:	8f 93       	push	r24
    1b7e:	9f 93       	push	r25
    1b80:	af 93       	push	r26
    1b82:	bf 93       	push	r27
    1b84:	ef 93       	push	r30
    1b86:	ff 93       	push	r31
    1b88:	df 93       	push	r29
    1b8a:	cf 93       	push	r28
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
	if ((g_callback_timer1ptr)!= NULL_PTR)
    1b90:	80 91 79 01 	lds	r24, 0x0179
    1b94:	90 91 7a 01 	lds	r25, 0x017A
    1b98:	00 97       	sbiw	r24, 0x00	; 0
    1b9a:	29 f0       	breq	.+10     	; 0x1ba6 <__vector_9+0x40>
	{
		(*g_callback_timer1ptr)();
    1b9c:	e0 91 79 01 	lds	r30, 0x0179
    1ba0:	f0 91 7a 01 	lds	r31, 0x017A
    1ba4:	09 95       	icall
	}
}
    1ba6:	cf 91       	pop	r28
    1ba8:	df 91       	pop	r29
    1baa:	ff 91       	pop	r31
    1bac:	ef 91       	pop	r30
    1bae:	bf 91       	pop	r27
    1bb0:	af 91       	pop	r26
    1bb2:	9f 91       	pop	r25
    1bb4:	8f 91       	pop	r24
    1bb6:	7f 91       	pop	r23
    1bb8:	6f 91       	pop	r22
    1bba:	5f 91       	pop	r21
    1bbc:	4f 91       	pop	r20
    1bbe:	3f 91       	pop	r19
    1bc0:	2f 91       	pop	r18
    1bc2:	0f 90       	pop	r0
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	0f 90       	pop	r0
    1bc8:	1f 90       	pop	r1
    1bca:	18 95       	reti

00001bcc <__vector_7>:

ISR (TIMER1_COMPA_vect)
{
    1bcc:	1f 92       	push	r1
    1bce:	0f 92       	push	r0
    1bd0:	0f b6       	in	r0, 0x3f	; 63
    1bd2:	0f 92       	push	r0
    1bd4:	11 24       	eor	r1, r1
    1bd6:	2f 93       	push	r18
    1bd8:	3f 93       	push	r19
    1bda:	4f 93       	push	r20
    1bdc:	5f 93       	push	r21
    1bde:	6f 93       	push	r22
    1be0:	7f 93       	push	r23
    1be2:	8f 93       	push	r24
    1be4:	9f 93       	push	r25
    1be6:	af 93       	push	r26
    1be8:	bf 93       	push	r27
    1bea:	ef 93       	push	r30
    1bec:	ff 93       	push	r31
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
	if ((g_callback_timer1ptr)!= NULL_PTR)
    1bf6:	80 91 79 01 	lds	r24, 0x0179
    1bfa:	90 91 7a 01 	lds	r25, 0x017A
    1bfe:	00 97       	sbiw	r24, 0x00	; 0
    1c00:	29 f0       	breq	.+10     	; 0x1c0c <__vector_7+0x40>
		{
			(*g_callback_timer1ptr)();
    1c02:	e0 91 79 01 	lds	r30, 0x0179
    1c06:	f0 91 7a 01 	lds	r31, 0x017A
    1c0a:	09 95       	icall
		}
}
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	ff 91       	pop	r31
    1c12:	ef 91       	pop	r30
    1c14:	bf 91       	pop	r27
    1c16:	af 91       	pop	r26
    1c18:	9f 91       	pop	r25
    1c1a:	8f 91       	pop	r24
    1c1c:	7f 91       	pop	r23
    1c1e:	6f 91       	pop	r22
    1c20:	5f 91       	pop	r21
    1c22:	4f 91       	pop	r20
    1c24:	3f 91       	pop	r19
    1c26:	2f 91       	pop	r18
    1c28:	0f 90       	pop	r0
    1c2a:	0f be       	out	0x3f, r0	; 63
    1c2c:	0f 90       	pop	r0
    1c2e:	1f 90       	pop	r1
    1c30:	18 95       	reti

00001c32 <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1c32:	df 93       	push	r29
    1c34:	cf 93       	push	r28
    1c36:	00 d0       	rcall	.+0      	; 0x1c38 <Timer1_init+0x6>
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
    1c3c:	9a 83       	std	Y+2, r25	; 0x02
    1c3e:	89 83       	std	Y+1, r24	; 0x01
	if ((Config_Ptr -> mode ) == normal)
    1c40:	e9 81       	ldd	r30, Y+1	; 0x01
    1c42:	fa 81       	ldd	r31, Y+2	; 0x02
    1c44:	85 81       	ldd	r24, Z+5	; 0x05
    1c46:	88 23       	and	r24, r24
    1c48:	a1 f4       	brne	.+40     	; 0x1c72 <Timer1_init+0x40>
	{
		TCNT1 = Config_Ptr -> initial_value;
    1c4a:	ac e4       	ldi	r26, 0x4C	; 76
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c50:	fa 81       	ldd	r31, Y+2	; 0x02
    1c52:	80 81       	ld	r24, Z
    1c54:	91 81       	ldd	r25, Z+1	; 0x01
    1c56:	11 96       	adiw	r26, 0x01	; 1
    1c58:	9c 93       	st	X, r25
    1c5a:	8e 93       	st	-X, r24
		TCCR1A = 0;
    1c5c:	ef e4       	ldi	r30, 0x4F	; 79
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	10 82       	st	Z, r1
		TCCR1B = 0;
    1c62:	ee e4       	ldi	r30, 0x4E	; 78
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	10 82       	st	Z, r1
		TIMSK = (1<<TOIE1);
    1c68:	e9 e5       	ldi	r30, 0x59	; 89
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	84 e0       	ldi	r24, 0x04	; 4
    1c6e:	80 83       	st	Z, r24
    1c70:	22 c0       	rjmp	.+68     	; 0x1cb6 <Timer1_init+0x84>
	}
	else if ((Config_Ptr -> mode ) == compare)
    1c72:	e9 81       	ldd	r30, Y+1	; 0x01
    1c74:	fa 81       	ldd	r31, Y+2	; 0x02
    1c76:	85 81       	ldd	r24, Z+5	; 0x05
    1c78:	81 30       	cpi	r24, 0x01	; 1
    1c7a:	e9 f4       	brne	.+58     	; 0x1cb6 <Timer1_init+0x84>
	{
		TCNT1 = Config_Ptr -> initial_value;
    1c7c:	ac e4       	ldi	r26, 0x4C	; 76
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	e9 81       	ldd	r30, Y+1	; 0x01
    1c82:	fa 81       	ldd	r31, Y+2	; 0x02
    1c84:	80 81       	ld	r24, Z
    1c86:	91 81       	ldd	r25, Z+1	; 0x01
    1c88:	11 96       	adiw	r26, 0x01	; 1
    1c8a:	9c 93       	st	X, r25
    1c8c:	8e 93       	st	-X, r24
		OCR1A = Config_Ptr -> compare_value;
    1c8e:	aa e4       	ldi	r26, 0x4A	; 74
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	e9 81       	ldd	r30, Y+1	; 0x01
    1c94:	fa 81       	ldd	r31, Y+2	; 0x02
    1c96:	82 81       	ldd	r24, Z+2	; 0x02
    1c98:	93 81       	ldd	r25, Z+3	; 0x03
    1c9a:	11 96       	adiw	r26, 0x01	; 1
    1c9c:	9c 93       	st	X, r25
    1c9e:	8e 93       	st	-X, r24
		TCCR1A = 0;
    1ca0:	ef e4       	ldi	r30, 0x4F	; 79
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	10 82       	st	Z, r1
		TCCR1B = (1<<WGM12);
    1ca6:	ee e4       	ldi	r30, 0x4E	; 78
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	88 e0       	ldi	r24, 0x08	; 8
    1cac:	80 83       	st	Z, r24
		TIMSK = (1<<OCIE1A);
    1cae:	e9 e5       	ldi	r30, 0x59	; 89
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 e1       	ldi	r24, 0x10	; 16
    1cb4:	80 83       	st	Z, r24
	}
	TCCR1B |= (Config_Ptr -> prescaler)& 0x07;
    1cb6:	ae e4       	ldi	r26, 0x4E	; 78
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	ee e4       	ldi	r30, 0x4E	; 78
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	98 2f       	mov	r25, r24
    1cc2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc6:	84 81       	ldd	r24, Z+4	; 0x04
    1cc8:	87 70       	andi	r24, 0x07	; 7
    1cca:	89 2b       	or	r24, r25
    1ccc:	8c 93       	st	X, r24



}
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	cf 91       	pop	r28
    1cd4:	df 91       	pop	r29
    1cd6:	08 95       	ret

00001cd8 <Timer1_deInit>:

void Timer1_deInit(void)
{
    1cd8:	df 93       	push	r29
    1cda:	cf 93       	push	r28
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1ce0:	ec e4       	ldi	r30, 0x4C	; 76
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	11 82       	std	Z+1, r1	; 0x01
    1ce6:	10 82       	st	Z, r1
	OCR1A = 0;
    1ce8:	ea e4       	ldi	r30, 0x4A	; 74
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	11 82       	std	Z+1, r1	; 0x01
    1cee:	10 82       	st	Z, r1
	TCCR1A = 0;
    1cf0:	ef e4       	ldi	r30, 0x4F	; 79
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	10 82       	st	Z, r1
	TCCR1B = 0;
    1cf6:	ee e4       	ldi	r30, 0x4E	; 78
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	10 82       	st	Z, r1
	TIMSK = 0;
    1cfc:	e9 e5       	ldi	r30, 0x59	; 89
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	10 82       	st	Z, r1
}
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void))
{
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	00 d0       	rcall	.+0      	; 0x1d0e <Timer1_setCallBack+0x6>
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
    1d12:	9a 83       	std	Y+2, r25	; 0x02
    1d14:	89 83       	std	Y+1, r24	; 0x01
	g_callback_timer1ptr = a_ptr;
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1a:	90 93 7a 01 	sts	0x017A, r25
    1d1e:	80 93 79 01 	sts	0x0179, r24

}
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	cf 91       	pop	r28
    1d28:	df 91       	pop	r29
    1d2a:	08 95       	ret

00001d2c <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <TWI_init+0x6>
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	9a 83       	std	Y+2, r25	; 0x02
    1d38:	89 83       	std	Y+1, r24	; 0x01

    TWBR = (uint8) (Config_Ptr -> bit_rate);
    1d3a:	a0 e2       	ldi	r26, 0x20	; 32
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d40:	fa 81       	ldd	r31, Y+2	; 0x02
    1d42:	81 81       	ldd	r24, Z+1	; 0x01
    1d44:	92 81       	ldd	r25, Z+2	; 0x02
    1d46:	8c 93       	st	X, r24
	TWSR =(uint8) (((Config_Ptr -> bit_rate)>>8) & 0x03);
    1d48:	a1 e2       	ldi	r26, 0x21	; 33
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d50:	81 81       	ldd	r24, Z+1	; 0x01
    1d52:	92 81       	ldd	r25, Z+2	; 0x02
    1d54:	89 2f       	mov	r24, r25
    1d56:	99 27       	eor	r25, r25
    1d58:	83 70       	andi	r24, 0x03	; 3
    1d5a:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address ; // my address = 0x01 :)
    1d5c:	a2 e2       	ldi	r26, 0x22	; 34
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e9 81       	ldd	r30, Y+1	; 0x01
    1d62:	fa 81       	ldd	r31, Y+2	; 0x02
    1d64:	80 81       	ld	r24, Z
    1d66:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1d68:	e6 e5       	ldi	r30, 0x56	; 86
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	84 e0       	ldi	r24, 0x04	; 4
    1d6e:	80 83       	st	Z, r24
}
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	cf 91       	pop	r28
    1d76:	df 91       	pop	r29
    1d78:	08 95       	ret

00001d7a <TWI_start>:

void TWI_start(void)
{
    1d7a:	df 93       	push	r29
    1d7c:	cf 93       	push	r28
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1d82:	e6 e5       	ldi	r30, 0x56	; 86
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	84 ea       	ldi	r24, 0xA4	; 164
    1d88:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1d8a:	e6 e5       	ldi	r30, 0x56	; 86
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	88 23       	and	r24, r24
    1d92:	dc f7       	brge	.-10     	; 0x1d8a <TWI_start+0x10>
}
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <TWI_stop>:

void TWI_stop(void)
{
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1da2:	e6 e5       	ldi	r30, 0x56	; 86
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	84 e9       	ldi	r24, 0x94	; 148
    1da8:	80 83       	st	Z, r24
}
    1daa:	cf 91       	pop	r28
    1dac:	df 91       	pop	r29
    1dae:	08 95       	ret

00001db0 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1db0:	df 93       	push	r29
    1db2:	cf 93       	push	r28
    1db4:	0f 92       	push	r0
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
    1dba:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1dbc:	e3 e2       	ldi	r30, 0x23	; 35
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1dc4:	e6 e5       	ldi	r30, 0x56	; 86
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	84 e8       	ldi	r24, 0x84	; 132
    1dca:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1dcc:	e6 e5       	ldi	r30, 0x56	; 86
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	88 23       	and	r24, r24
    1dd4:	dc f7       	brge	.-10     	; 0x1dcc <TWI_writeByte+0x1c>
}
    1dd6:	0f 90       	pop	r0
    1dd8:	cf 91       	pop	r28
    1dda:	df 91       	pop	r29
    1ddc:	08 95       	ret

00001dde <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1de6:	e6 e5       	ldi	r30, 0x56	; 86
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	84 ec       	ldi	r24, 0xC4	; 196
    1dec:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1dee:	e6 e5       	ldi	r30, 0x56	; 86
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	88 23       	and	r24, r24
    1df6:	dc f7       	brge	.-10     	; 0x1dee <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1df8:	e3 e2       	ldi	r30, 0x23	; 35
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
}
    1dfe:	cf 91       	pop	r28
    1e00:	df 91       	pop	r29
    1e02:	08 95       	ret

00001e04 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1e0c:	e6 e5       	ldi	r30, 0x56	; 86
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	84 e8       	ldi	r24, 0x84	; 132
    1e12:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1e14:	e6 e5       	ldi	r30, 0x56	; 86
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	88 23       	and	r24, r24
    1e1c:	dc f7       	brge	.-10     	; 0x1e14 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1e1e:	e3 e2       	ldi	r30, 0x23	; 35
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
}
    1e24:	cf 91       	pop	r28
    1e26:	df 91       	pop	r29
    1e28:	08 95       	ret

00001e2a <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	0f 92       	push	r0
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1e34:	e1 e2       	ldi	r30, 0x21	; 33
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	88 7f       	andi	r24, 0xF8	; 248
    1e3c:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e40:	0f 90       	pop	r0
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	08 95       	ret

00001e48 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	00 d0       	rcall	.+0      	; 0x1e4e <UART_init+0x6>
    1e4e:	00 d0       	rcall	.+0      	; 0x1e50 <UART_init+0x8>
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
    1e54:	9c 83       	std	Y+4, r25	; 0x04
    1e56:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1e58:	1a 82       	std	Y+2, r1	; 0x02
    1e5a:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1e5c:	eb e2       	ldi	r30, 0x2B	; 43
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	82 e0       	ldi	r24, 0x02	; 2
    1e62:	80 83       	st	Z, r24
	 * TXCIE = 0 Disable USART Tx Complete Interrupt Enable
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 ***********************************************************************/
	if ((Config_Ptr -> bit_data ) == nine_data)
    1e64:	eb 81       	ldd	r30, Y+3	; 0x03
    1e66:	fc 81       	ldd	r31, Y+4	; 0x04
    1e68:	80 81       	ld	r24, Z
    1e6a:	87 30       	cpi	r24, 0x07	; 7
    1e6c:	49 f4       	brne	.+18     	; 0x1e80 <UART_init+0x38>
	{
		UCSRB = (1<<RXEN) | (1<<TXEN)| (1<<UCSZ2);
    1e6e:	ea e2       	ldi	r30, 0x2A	; 42
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	8c e1       	ldi	r24, 0x1C	; 28
    1e74:	80 83       	st	Z, r24
		UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
    1e76:	e0 e4       	ldi	r30, 0x40	; 64
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	86 e8       	ldi	r24, 0x86	; 134
    1e7c:	80 83       	st	Z, r24
    1e7e:	17 c0       	rjmp	.+46     	; 0x1eae <UART_init+0x66>
	}
	else {
		UCSRB = (1<<RXEN) | (1<<TXEN);
    1e80:	ea e2       	ldi	r30, 0x2A	; 42
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	88 e1       	ldi	r24, 0x18	; 24
    1e86:	80 83       	st	Z, r24
		UCSRC = (1<<URSEL);
    1e88:	e0 e4       	ldi	r30, 0x40	; 64
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 e8       	ldi	r24, 0x80	; 128
    1e8e:	80 83       	st	Z, r24
		UCSRC|= (Config_Ptr -> bit_data)<<1;
    1e90:	a0 e4       	ldi	r26, 0x40	; 64
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	e0 e4       	ldi	r30, 0x40	; 64
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	28 2f       	mov	r18, r24
    1e9c:	eb 81       	ldd	r30, Y+3	; 0x03
    1e9e:	fc 81       	ldd	r31, Y+4	; 0x04
    1ea0:	80 81       	ld	r24, Z
    1ea2:	88 2f       	mov	r24, r24
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	88 0f       	add	r24, r24
    1ea8:	99 1f       	adc	r25, r25
    1eaa:	82 2b       	or	r24, r18
    1eac:	8c 93       	st	X, r24
	}
	UCSRC |= (Config_Ptr -> parity)<<4;
    1eae:	a0 e4       	ldi	r26, 0x40	; 64
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	e0 e4       	ldi	r30, 0x40	; 64
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	28 2f       	mov	r18, r24
    1eba:	eb 81       	ldd	r30, Y+3	; 0x03
    1ebc:	fc 81       	ldd	r31, Y+4	; 0x04
    1ebe:	81 81       	ldd	r24, Z+1	; 0x01
    1ec0:	88 2f       	mov	r24, r24
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	82 95       	swap	r24
    1ec6:	92 95       	swap	r25
    1ec8:	90 7f       	andi	r25, 0xF0	; 240
    1eca:	98 27       	eor	r25, r24
    1ecc:	80 7f       	andi	r24, 0xF0	; 240
    1ece:	98 27       	eor	r25, r24
    1ed0:	82 2b       	or	r24, r18
    1ed2:	8c 93       	st	X, r24
	UCSRC |= (Config_Ptr -> stop_bit)<<3;
    1ed4:	a0 e4       	ldi	r26, 0x40	; 64
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	e0 e4       	ldi	r30, 0x40	; 64
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	28 2f       	mov	r18, r24
    1ee0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ee2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ee4:	82 81       	ldd	r24, Z+2	; 0x02
    1ee6:	88 2f       	mov	r24, r24
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	88 0f       	add	r24, r24
    1eec:	99 1f       	adc	r25, r25
    1eee:	88 0f       	add	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	88 0f       	add	r24, r24
    1ef4:	99 1f       	adc	r25, r25
    1ef6:	82 2b       	or	r24, r18
    1ef8:	8c 93       	st	X, r24
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr -> baud_rate) * 8UL))) - 1);
    1efa:	eb 81       	ldd	r30, Y+3	; 0x03
    1efc:	fc 81       	ldd	r31, Y+4	; 0x04
    1efe:	83 81       	ldd	r24, Z+3	; 0x03
    1f00:	94 81       	ldd	r25, Z+4	; 0x04
    1f02:	a5 81       	ldd	r26, Z+5	; 0x05
    1f04:	b6 81       	ldd	r27, Z+6	; 0x06
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	aa 1f       	adc	r26, r26
    1f0c:	bb 1f       	adc	r27, r27
    1f0e:	88 0f       	add	r24, r24
    1f10:	99 1f       	adc	r25, r25
    1f12:	aa 1f       	adc	r26, r26
    1f14:	bb 1f       	adc	r27, r27
    1f16:	88 0f       	add	r24, r24
    1f18:	99 1f       	adc	r25, r25
    1f1a:	aa 1f       	adc	r26, r26
    1f1c:	bb 1f       	adc	r27, r27
    1f1e:	9c 01       	movw	r18, r24
    1f20:	ad 01       	movw	r20, r26
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	92 e1       	ldi	r25, 0x12	; 18
    1f26:	aa e7       	ldi	r26, 0x7A	; 122
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	bc 01       	movw	r22, r24
    1f2c:	cd 01       	movw	r24, r26
    1f2e:	0e 94 42 10 	call	0x2084	; 0x2084 <__udivmodsi4>
    1f32:	da 01       	movw	r26, r20
    1f34:	c9 01       	movw	r24, r18
    1f36:	01 97       	sbiw	r24, 0x01	; 1
    1f38:	9a 83       	std	Y+2, r25	; 0x02
    1f3a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1f3c:	e0 e4       	ldi	r30, 0x40	; 64
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	9a 81       	ldd	r25, Y+2	; 0x02
    1f44:	89 2f       	mov	r24, r25
    1f46:	99 27       	eor	r25, r25
    1f48:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1f4a:	e9 e2       	ldi	r30, 0x29	; 41
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
    1f50:	80 83       	st	Z, r24
}
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	cf 91       	pop	r28
    1f5c:	df 91       	pop	r29
    1f5e:	08 95       	ret

00001f60 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	0f 92       	push	r0
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    1f6a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1f6c:	eb e2       	ldi	r30, 0x2B	; 43
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	88 2f       	mov	r24, r24
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	80 72       	andi	r24, 0x20	; 32
    1f78:	90 70       	andi	r25, 0x00	; 0
    1f7a:	00 97       	sbiw	r24, 0x00	; 0
    1f7c:	b9 f3       	breq	.-18     	; 0x1f6c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1f7e:	ec e2       	ldi	r30, 0x2C	; 44
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	89 81       	ldd	r24, Y+1	; 0x01
    1f84:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1f86:	0f 90       	pop	r0
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	08 95       	ret

00001f8e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1f96:	eb e2       	ldi	r30, 0x2B	; 43
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	88 23       	and	r24, r24
    1f9e:	dc f7       	brge	.-10     	; 0x1f96 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    1fa0:	ec e2       	ldi	r30, 0x2C	; 44
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
}
    1fa6:	cf 91       	pop	r28
    1fa8:	df 91       	pop	r29
    1faa:	08 95       	ret

00001fac <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	00 d0       	rcall	.+0      	; 0x1fb2 <UART_sendString+0x6>
    1fb2:	0f 92       	push	r0
    1fb4:	cd b7       	in	r28, 0x3d	; 61
    1fb6:	de b7       	in	r29, 0x3e	; 62
    1fb8:	9b 83       	std	Y+3, r25	; 0x03
    1fba:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1fbc:	19 82       	std	Y+1, r1	; 0x01
    1fbe:	0e c0       	rjmp	.+28     	; 0x1fdc <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	28 2f       	mov	r18, r24
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc8:	9b 81       	ldd	r25, Y+3	; 0x03
    1fca:	fc 01       	movw	r30, r24
    1fcc:	e2 0f       	add	r30, r18
    1fce:	f3 1f       	adc	r31, r19
    1fd0:	80 81       	ld	r24, Z
    1fd2:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <UART_sendByte>
		i++;
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	8f 5f       	subi	r24, 0xFF	; 255
    1fda:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	28 2f       	mov	r18, r24
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	e2 0f       	add	r30, r18
    1fea:	f3 1f       	adc	r31, r19
    1fec:	80 81       	ld	r24, Z
    1fee:	88 23       	and	r24, r24
    1ff0:	39 f7       	brne	.-50     	; 0x1fc0 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	cf 91       	pop	r28
    1ffa:	df 91       	pop	r29
    1ffc:	08 95       	ret

00001ffe <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1ffe:	0f 93       	push	r16
    2000:	1f 93       	push	r17
    2002:	df 93       	push	r29
    2004:	cf 93       	push	r28
    2006:	00 d0       	rcall	.+0      	; 0x2008 <UART_receiveString+0xa>
    2008:	0f 92       	push	r0
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62
    200e:	9b 83       	std	Y+3, r25	; 0x03
    2010:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2012:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	28 2f       	mov	r18, r24
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	8a 81       	ldd	r24, Y+2	; 0x02
    201c:	9b 81       	ldd	r25, Y+3	; 0x03
    201e:	8c 01       	movw	r16, r24
    2020:	02 0f       	add	r16, r18
    2022:	13 1f       	adc	r17, r19
    2024:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <UART_recieveByte>
    2028:	f8 01       	movw	r30, r16
    202a:	80 83       	st	Z, r24
    202c:	0f c0       	rjmp	.+30     	; 0x204c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	8f 5f       	subi	r24, 0xFF	; 255
    2032:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	28 2f       	mov	r18, r24
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	9b 81       	ldd	r25, Y+3	; 0x03
    203e:	8c 01       	movw	r16, r24
    2040:	02 0f       	add	r16, r18
    2042:	13 1f       	adc	r17, r19
    2044:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <UART_recieveByte>
    2048:	f8 01       	movw	r30, r16
    204a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	28 2f       	mov	r18, r24
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	8a 81       	ldd	r24, Y+2	; 0x02
    2054:	9b 81       	ldd	r25, Y+3	; 0x03
    2056:	fc 01       	movw	r30, r24
    2058:	e2 0f       	add	r30, r18
    205a:	f3 1f       	adc	r31, r19
    205c:	80 81       	ld	r24, Z
    205e:	83 32       	cpi	r24, 0x23	; 35
    2060:	31 f7       	brne	.-52     	; 0x202e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	28 2f       	mov	r18, r24
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	9b 81       	ldd	r25, Y+3	; 0x03
    206c:	fc 01       	movw	r30, r24
    206e:	e2 0f       	add	r30, r18
    2070:	f3 1f       	adc	r31, r19
    2072:	10 82       	st	Z, r1
}
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	cf 91       	pop	r28
    207c:	df 91       	pop	r29
    207e:	1f 91       	pop	r17
    2080:	0f 91       	pop	r16
    2082:	08 95       	ret

00002084 <__udivmodsi4>:
    2084:	a1 e2       	ldi	r26, 0x21	; 33
    2086:	1a 2e       	mov	r1, r26
    2088:	aa 1b       	sub	r26, r26
    208a:	bb 1b       	sub	r27, r27
    208c:	fd 01       	movw	r30, r26
    208e:	0d c0       	rjmp	.+26     	; 0x20aa <__udivmodsi4_ep>

00002090 <__udivmodsi4_loop>:
    2090:	aa 1f       	adc	r26, r26
    2092:	bb 1f       	adc	r27, r27
    2094:	ee 1f       	adc	r30, r30
    2096:	ff 1f       	adc	r31, r31
    2098:	a2 17       	cp	r26, r18
    209a:	b3 07       	cpc	r27, r19
    209c:	e4 07       	cpc	r30, r20
    209e:	f5 07       	cpc	r31, r21
    20a0:	20 f0       	brcs	.+8      	; 0x20aa <__udivmodsi4_ep>
    20a2:	a2 1b       	sub	r26, r18
    20a4:	b3 0b       	sbc	r27, r19
    20a6:	e4 0b       	sbc	r30, r20
    20a8:	f5 0b       	sbc	r31, r21

000020aa <__udivmodsi4_ep>:
    20aa:	66 1f       	adc	r22, r22
    20ac:	77 1f       	adc	r23, r23
    20ae:	88 1f       	adc	r24, r24
    20b0:	99 1f       	adc	r25, r25
    20b2:	1a 94       	dec	r1
    20b4:	69 f7       	brne	.-38     	; 0x2090 <__udivmodsi4_loop>
    20b6:	60 95       	com	r22
    20b8:	70 95       	com	r23
    20ba:	80 95       	com	r24
    20bc:	90 95       	com	r25
    20be:	9b 01       	movw	r18, r22
    20c0:	ac 01       	movw	r20, r24
    20c2:	bd 01       	movw	r22, r26
    20c4:	cf 01       	movw	r24, r30
    20c6:	08 95       	ret

000020c8 <__prologue_saves__>:
    20c8:	2f 92       	push	r2
    20ca:	3f 92       	push	r3
    20cc:	4f 92       	push	r4
    20ce:	5f 92       	push	r5
    20d0:	6f 92       	push	r6
    20d2:	7f 92       	push	r7
    20d4:	8f 92       	push	r8
    20d6:	9f 92       	push	r9
    20d8:	af 92       	push	r10
    20da:	bf 92       	push	r11
    20dc:	cf 92       	push	r12
    20de:	df 92       	push	r13
    20e0:	ef 92       	push	r14
    20e2:	ff 92       	push	r15
    20e4:	0f 93       	push	r16
    20e6:	1f 93       	push	r17
    20e8:	cf 93       	push	r28
    20ea:	df 93       	push	r29
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	ca 1b       	sub	r28, r26
    20f2:	db 0b       	sbc	r29, r27
    20f4:	0f b6       	in	r0, 0x3f	; 63
    20f6:	f8 94       	cli
    20f8:	de bf       	out	0x3e, r29	; 62
    20fa:	0f be       	out	0x3f, r0	; 63
    20fc:	cd bf       	out	0x3d, r28	; 61
    20fe:	09 94       	ijmp

00002100 <__epilogue_restores__>:
    2100:	2a 88       	ldd	r2, Y+18	; 0x12
    2102:	39 88       	ldd	r3, Y+17	; 0x11
    2104:	48 88       	ldd	r4, Y+16	; 0x10
    2106:	5f 84       	ldd	r5, Y+15	; 0x0f
    2108:	6e 84       	ldd	r6, Y+14	; 0x0e
    210a:	7d 84       	ldd	r7, Y+13	; 0x0d
    210c:	8c 84       	ldd	r8, Y+12	; 0x0c
    210e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2110:	aa 84       	ldd	r10, Y+10	; 0x0a
    2112:	b9 84       	ldd	r11, Y+9	; 0x09
    2114:	c8 84       	ldd	r12, Y+8	; 0x08
    2116:	df 80       	ldd	r13, Y+7	; 0x07
    2118:	ee 80       	ldd	r14, Y+6	; 0x06
    211a:	fd 80       	ldd	r15, Y+5	; 0x05
    211c:	0c 81       	ldd	r16, Y+4	; 0x04
    211e:	1b 81       	ldd	r17, Y+3	; 0x03
    2120:	aa 81       	ldd	r26, Y+2	; 0x02
    2122:	b9 81       	ldd	r27, Y+1	; 0x01
    2124:	ce 0f       	add	r28, r30
    2126:	d1 1d       	adc	r29, r1
    2128:	0f b6       	in	r0, 0x3f	; 63
    212a:	f8 94       	cli
    212c:	de bf       	out	0x3e, r29	; 62
    212e:	0f be       	out	0x3f, r0	; 63
    2130:	cd bf       	out	0x3d, r28	; 61
    2132:	ed 01       	movw	r28, r26
    2134:	08 95       	ret

00002136 <_exit>:
    2136:	f8 94       	cli

00002138 <__stop_program>:
    2138:	ff cf       	rjmp	.-2      	; 0x2138 <__stop_program>
